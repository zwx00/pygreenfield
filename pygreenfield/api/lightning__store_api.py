# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pygreenfield.api_client import ApiClient


class LightningStoreApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def store_lightning_node_api_connect_to_node(self, body, crypto_code, store_id, **kwargs):  # noqa: E501
        """Connect to lightning node  # noqa: E501

        Connect to another lightning node.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_lightning_node_api_connect_to_node(body, crypto_code, store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConnectToNodeRequest body: (required)
        :param str crypto_code: The cryptoCode of the lightning-node to query (required)
        :param str store_id: The store id with the lightning-node configuration to query (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.store_lightning_node_api_connect_to_node_with_http_info(body, crypto_code, store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.store_lightning_node_api_connect_to_node_with_http_info(body, crypto_code, store_id, **kwargs)  # noqa: E501
            return data

    def store_lightning_node_api_connect_to_node_with_http_info(self, body, crypto_code, store_id, **kwargs):  # noqa: E501
        """Connect to lightning node  # noqa: E501

        Connect to another lightning node.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_lightning_node_api_connect_to_node_with_http_info(body, crypto_code, store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConnectToNodeRequest body: (required)
        :param str crypto_code: The cryptoCode of the lightning-node to query (required)
        :param str store_id: The store id with the lightning-node configuration to query (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'crypto_code', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method store_lightning_node_api_connect_to_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `store_lightning_node_api_connect_to_node`")  # noqa: E501
        # verify the required parameter 'crypto_code' is set
        if ('crypto_code' not in params or
                params['crypto_code'] is None):
            raise ValueError("Missing the required parameter `crypto_code` when calling `store_lightning_node_api_connect_to_node`")  # noqa: E501
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `store_lightning_node_api_connect_to_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crypto_code' in params:
            path_params['cryptoCode'] = params['crypto_code']  # noqa: E501
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/lightning/{cryptoCode}/connect', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def store_lightning_node_api_create_invoice(self, body, crypto_code, store_id, **kwargs):  # noqa: E501
        """Create lightning invoice  # noqa: E501

        Create a lightning invoice.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_lightning_node_api_create_invoice(body, crypto_code, store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateLightningInvoiceRequest body: (required)
        :param str crypto_code: The cryptoCode of the lightning-node to query (required)
        :param str store_id: The store id with the lightning-node configuration to query (required)
        :return: LightningInvoiceData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.store_lightning_node_api_create_invoice_with_http_info(body, crypto_code, store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.store_lightning_node_api_create_invoice_with_http_info(body, crypto_code, store_id, **kwargs)  # noqa: E501
            return data

    def store_lightning_node_api_create_invoice_with_http_info(self, body, crypto_code, store_id, **kwargs):  # noqa: E501
        """Create lightning invoice  # noqa: E501

        Create a lightning invoice.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_lightning_node_api_create_invoice_with_http_info(body, crypto_code, store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateLightningInvoiceRequest body: (required)
        :param str crypto_code: The cryptoCode of the lightning-node to query (required)
        :param str store_id: The store id with the lightning-node configuration to query (required)
        :return: LightningInvoiceData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'crypto_code', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method store_lightning_node_api_create_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `store_lightning_node_api_create_invoice`")  # noqa: E501
        # verify the required parameter 'crypto_code' is set
        if ('crypto_code' not in params or
                params['crypto_code'] is None):
            raise ValueError("Missing the required parameter `crypto_code` when calling `store_lightning_node_api_create_invoice`")  # noqa: E501
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `store_lightning_node_api_create_invoice`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crypto_code' in params:
            path_params['cryptoCode'] = params['crypto_code']  # noqa: E501
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/lightning/{cryptoCode}/invoices', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LightningInvoiceData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def store_lightning_node_api_get_balance(self, crypto_code, store_id, **kwargs):  # noqa: E501
        """Get node balance  # noqa: E501

        View balance of the lightning node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_lightning_node_api_get_balance(crypto_code, store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crypto_code: The cryptoCode of the lightning-node to query (required)
        :param str store_id: The store id with the lightning-node configuration to query (required)
        :return: LightningNodeBalanceData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.store_lightning_node_api_get_balance_with_http_info(crypto_code, store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.store_lightning_node_api_get_balance_with_http_info(crypto_code, store_id, **kwargs)  # noqa: E501
            return data

    def store_lightning_node_api_get_balance_with_http_info(self, crypto_code, store_id, **kwargs):  # noqa: E501
        """Get node balance  # noqa: E501

        View balance of the lightning node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_lightning_node_api_get_balance_with_http_info(crypto_code, store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crypto_code: The cryptoCode of the lightning-node to query (required)
        :param str store_id: The store id with the lightning-node configuration to query (required)
        :return: LightningNodeBalanceData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crypto_code', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method store_lightning_node_api_get_balance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crypto_code' is set
        if ('crypto_code' not in params or
                params['crypto_code'] is None):
            raise ValueError("Missing the required parameter `crypto_code` when calling `store_lightning_node_api_get_balance`")  # noqa: E501
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `store_lightning_node_api_get_balance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crypto_code' in params:
            path_params['cryptoCode'] = params['crypto_code']  # noqa: E501
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/lightning/{cryptoCode}/balance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LightningNodeBalanceData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def store_lightning_node_api_get_channels(self, crypto_code, store_id, **kwargs):  # noqa: E501
        """Get channels  # noqa: E501

        View information about the current channels of the lightning node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_lightning_node_api_get_channels(crypto_code, store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crypto_code: The cryptoCode of the lightning-node to query (required)
        :param str store_id: The store id with the lightning-node configuration to query (required)
        :return: list[LightningChannelData]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.store_lightning_node_api_get_channels_with_http_info(crypto_code, store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.store_lightning_node_api_get_channels_with_http_info(crypto_code, store_id, **kwargs)  # noqa: E501
            return data

    def store_lightning_node_api_get_channels_with_http_info(self, crypto_code, store_id, **kwargs):  # noqa: E501
        """Get channels  # noqa: E501

        View information about the current channels of the lightning node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_lightning_node_api_get_channels_with_http_info(crypto_code, store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crypto_code: The cryptoCode of the lightning-node to query (required)
        :param str store_id: The store id with the lightning-node configuration to query (required)
        :return: list[LightningChannelData]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crypto_code', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method store_lightning_node_api_get_channels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crypto_code' is set
        if ('crypto_code' not in params or
                params['crypto_code'] is None):
            raise ValueError("Missing the required parameter `crypto_code` when calling `store_lightning_node_api_get_channels`")  # noqa: E501
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `store_lightning_node_api_get_channels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crypto_code' in params:
            path_params['cryptoCode'] = params['crypto_code']  # noqa: E501
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/lightning/{cryptoCode}/channels', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[LightningChannelData]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def store_lightning_node_api_get_deposit_address(self, crypto_code, store_id, **kwargs):  # noqa: E501
        """Get deposit address  # noqa: E501

        Get an on-chain deposit address for the lightning node   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_lightning_node_api_get_deposit_address(crypto_code, store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crypto_code: The cryptoCode of the lightning-node to query (required)
        :param str store_id: The store id with the lightning-node configuration to query (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.store_lightning_node_api_get_deposit_address_with_http_info(crypto_code, store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.store_lightning_node_api_get_deposit_address_with_http_info(crypto_code, store_id, **kwargs)  # noqa: E501
            return data

    def store_lightning_node_api_get_deposit_address_with_http_info(self, crypto_code, store_id, **kwargs):  # noqa: E501
        """Get deposit address  # noqa: E501

        Get an on-chain deposit address for the lightning node   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_lightning_node_api_get_deposit_address_with_http_info(crypto_code, store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crypto_code: The cryptoCode of the lightning-node to query (required)
        :param str store_id: The store id with the lightning-node configuration to query (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crypto_code', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method store_lightning_node_api_get_deposit_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crypto_code' is set
        if ('crypto_code' not in params or
                params['crypto_code'] is None):
            raise ValueError("Missing the required parameter `crypto_code` when calling `store_lightning_node_api_get_deposit_address`")  # noqa: E501
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `store_lightning_node_api_get_deposit_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crypto_code' in params:
            path_params['cryptoCode'] = params['crypto_code']  # noqa: E501
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/lightning/{cryptoCode}/address', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def store_lightning_node_api_get_info(self, crypto_code, store_id, **kwargs):  # noqa: E501
        """Get node information  # noqa: E501

        View information about the lightning node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_lightning_node_api_get_info(crypto_code, store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crypto_code: The cryptoCode of the lightning-node to query (required)
        :param str store_id: The store id with the lightning-node configuration to query (required)
        :return: LightningNodeInformationData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.store_lightning_node_api_get_info_with_http_info(crypto_code, store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.store_lightning_node_api_get_info_with_http_info(crypto_code, store_id, **kwargs)  # noqa: E501
            return data

    def store_lightning_node_api_get_info_with_http_info(self, crypto_code, store_id, **kwargs):  # noqa: E501
        """Get node information  # noqa: E501

        View information about the lightning node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_lightning_node_api_get_info_with_http_info(crypto_code, store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crypto_code: The cryptoCode of the lightning-node to query (required)
        :param str store_id: The store id with the lightning-node configuration to query (required)
        :return: LightningNodeInformationData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crypto_code', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method store_lightning_node_api_get_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crypto_code' is set
        if ('crypto_code' not in params or
                params['crypto_code'] is None):
            raise ValueError("Missing the required parameter `crypto_code` when calling `store_lightning_node_api_get_info`")  # noqa: E501
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `store_lightning_node_api_get_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crypto_code' in params:
            path_params['cryptoCode'] = params['crypto_code']  # noqa: E501
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/lightning/{cryptoCode}/info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LightningNodeInformationData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def store_lightning_node_api_get_invoice(self, crypto_code, store_id, id, **kwargs):  # noqa: E501
        """Get invoice  # noqa: E501

        View information about the requested lightning invoice  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_lightning_node_api_get_invoice(crypto_code, store_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crypto_code: The cryptoCode of the lightning-node to query (required)
        :param str store_id: The store id with the lightning-node configuration to query (required)
        :param str id: The id of the lightning invoice. (required)
        :return: LightningInvoiceData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.store_lightning_node_api_get_invoice_with_http_info(crypto_code, store_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.store_lightning_node_api_get_invoice_with_http_info(crypto_code, store_id, id, **kwargs)  # noqa: E501
            return data

    def store_lightning_node_api_get_invoice_with_http_info(self, crypto_code, store_id, id, **kwargs):  # noqa: E501
        """Get invoice  # noqa: E501

        View information about the requested lightning invoice  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_lightning_node_api_get_invoice_with_http_info(crypto_code, store_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crypto_code: The cryptoCode of the lightning-node to query (required)
        :param str store_id: The store id with the lightning-node configuration to query (required)
        :param str id: The id of the lightning invoice. (required)
        :return: LightningInvoiceData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crypto_code', 'store_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method store_lightning_node_api_get_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crypto_code' is set
        if ('crypto_code' not in params or
                params['crypto_code'] is None):
            raise ValueError("Missing the required parameter `crypto_code` when calling `store_lightning_node_api_get_invoice`")  # noqa: E501
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `store_lightning_node_api_get_invoice`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `store_lightning_node_api_get_invoice`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crypto_code' in params:
            path_params['cryptoCode'] = params['crypto_code']  # noqa: E501
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/lightning/{cryptoCode}/invoices/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LightningInvoiceData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def store_lightning_node_api_get_payment(self, crypto_code, store_id, payment_hash, **kwargs):  # noqa: E501
        """Get payment  # noqa: E501

        View information about the requested lightning payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_lightning_node_api_get_payment(crypto_code, store_id, payment_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crypto_code: The cryptoCode of the lightning-node to query (required)
        :param str store_id: The store id with the lightning-node configuration to query (required)
        :param str payment_hash: The payment hash of the lightning payment. (required)
        :return: LightningPaymentData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.store_lightning_node_api_get_payment_with_http_info(crypto_code, store_id, payment_hash, **kwargs)  # noqa: E501
        else:
            (data) = self.store_lightning_node_api_get_payment_with_http_info(crypto_code, store_id, payment_hash, **kwargs)  # noqa: E501
            return data

    def store_lightning_node_api_get_payment_with_http_info(self, crypto_code, store_id, payment_hash, **kwargs):  # noqa: E501
        """Get payment  # noqa: E501

        View information about the requested lightning payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_lightning_node_api_get_payment_with_http_info(crypto_code, store_id, payment_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crypto_code: The cryptoCode of the lightning-node to query (required)
        :param str store_id: The store id with the lightning-node configuration to query (required)
        :param str payment_hash: The payment hash of the lightning payment. (required)
        :return: LightningPaymentData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crypto_code', 'store_id', 'payment_hash']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method store_lightning_node_api_get_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crypto_code' is set
        if ('crypto_code' not in params or
                params['crypto_code'] is None):
            raise ValueError("Missing the required parameter `crypto_code` when calling `store_lightning_node_api_get_payment`")  # noqa: E501
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `store_lightning_node_api_get_payment`")  # noqa: E501
        # verify the required parameter 'payment_hash' is set
        if ('payment_hash' not in params or
                params['payment_hash'] is None):
            raise ValueError("Missing the required parameter `payment_hash` when calling `store_lightning_node_api_get_payment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crypto_code' in params:
            path_params['cryptoCode'] = params['crypto_code']  # noqa: E501
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501
        if 'payment_hash' in params:
            path_params['paymentHash'] = params['payment_hash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/lightning/{cryptoCode}/payments/{paymentHash}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LightningPaymentData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def store_lightning_node_api_open_channel(self, body, crypto_code, store_id, **kwargs):  # noqa: E501
        """Open channel  # noqa: E501

        Open a channel with another lightning node. You should connect to that node first.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_lightning_node_api_open_channel(body, crypto_code, store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OpenLightningChannelRequest body: (required)
        :param str crypto_code: The cryptoCode of the lightning-node to query (required)
        :param str store_id: The store id with the lightning-node configuration to query (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.store_lightning_node_api_open_channel_with_http_info(body, crypto_code, store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.store_lightning_node_api_open_channel_with_http_info(body, crypto_code, store_id, **kwargs)  # noqa: E501
            return data

    def store_lightning_node_api_open_channel_with_http_info(self, body, crypto_code, store_id, **kwargs):  # noqa: E501
        """Open channel  # noqa: E501

        Open a channel with another lightning node. You should connect to that node first.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_lightning_node_api_open_channel_with_http_info(body, crypto_code, store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OpenLightningChannelRequest body: (required)
        :param str crypto_code: The cryptoCode of the lightning-node to query (required)
        :param str store_id: The store id with the lightning-node configuration to query (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'crypto_code', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method store_lightning_node_api_open_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `store_lightning_node_api_open_channel`")  # noqa: E501
        # verify the required parameter 'crypto_code' is set
        if ('crypto_code' not in params or
                params['crypto_code'] is None):
            raise ValueError("Missing the required parameter `crypto_code` when calling `store_lightning_node_api_open_channel`")  # noqa: E501
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `store_lightning_node_api_open_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crypto_code' in params:
            path_params['cryptoCode'] = params['crypto_code']  # noqa: E501
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/lightning/{cryptoCode}/channels', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def store_lightning_node_api_pay_invoice(self, body, crypto_code, store_id, **kwargs):  # noqa: E501
        """Pay Lightning Invoice  # noqa: E501

        Pay a lightning invoice.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_lightning_node_api_pay_invoice(body, crypto_code, store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PayLightningInvoiceRequest body: (required)
        :param str crypto_code: The cryptoCode of the lightning-node to query (required)
        :param str store_id: The store id with the lightning-node configuration to query (required)
        :return: LightningPaymentData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.store_lightning_node_api_pay_invoice_with_http_info(body, crypto_code, store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.store_lightning_node_api_pay_invoice_with_http_info(body, crypto_code, store_id, **kwargs)  # noqa: E501
            return data

    def store_lightning_node_api_pay_invoice_with_http_info(self, body, crypto_code, store_id, **kwargs):  # noqa: E501
        """Pay Lightning Invoice  # noqa: E501

        Pay a lightning invoice.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_lightning_node_api_pay_invoice_with_http_info(body, crypto_code, store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PayLightningInvoiceRequest body: (required)
        :param str crypto_code: The cryptoCode of the lightning-node to query (required)
        :param str store_id: The store id with the lightning-node configuration to query (required)
        :return: LightningPaymentData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'crypto_code', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method store_lightning_node_api_pay_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `store_lightning_node_api_pay_invoice`")  # noqa: E501
        # verify the required parameter 'crypto_code' is set
        if ('crypto_code' not in params or
                params['crypto_code'] is None):
            raise ValueError("Missing the required parameter `crypto_code` when calling `store_lightning_node_api_pay_invoice`")  # noqa: E501
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `store_lightning_node_api_pay_invoice`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crypto_code' in params:
            path_params['cryptoCode'] = params['crypto_code']  # noqa: E501
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/lightning/{cryptoCode}/invoices/pay', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LightningPaymentData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
