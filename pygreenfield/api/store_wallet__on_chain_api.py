# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pygreenfield.api_client import ApiClient


class StoreWalletOnChainApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def store_on_chain_wallets_create_on_chain_transaction(self, body, store_id, crypto_code, **kwargs):  # noqa: E501
        """Create store on-chain wallet transaction  # noqa: E501

        Create store on-chain wallet transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_on_chain_wallets_create_on_chain_transaction(body, store_id, crypto_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateOnChainTransactionRequest body: (required)
        :param str store_id: The store to fetch (required)
        :param str crypto_code: The crypto code of the wallet (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.store_on_chain_wallets_create_on_chain_transaction_with_http_info(body, store_id, crypto_code, **kwargs)  # noqa: E501
        else:
            (data) = self.store_on_chain_wallets_create_on_chain_transaction_with_http_info(body, store_id, crypto_code, **kwargs)  # noqa: E501
            return data

    def store_on_chain_wallets_create_on_chain_transaction_with_http_info(self, body, store_id, crypto_code, **kwargs):  # noqa: E501
        """Create store on-chain wallet transaction  # noqa: E501

        Create store on-chain wallet transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_on_chain_wallets_create_on_chain_transaction_with_http_info(body, store_id, crypto_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateOnChainTransactionRequest body: (required)
        :param str store_id: The store to fetch (required)
        :param str crypto_code: The crypto code of the wallet (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'store_id', 'crypto_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method store_on_chain_wallets_create_on_chain_transaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `store_on_chain_wallets_create_on_chain_transaction`")  # noqa: E501
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `store_on_chain_wallets_create_on_chain_transaction`")  # noqa: E501
        # verify the required parameter 'crypto_code' is set
        if ('crypto_code' not in params or
                params['crypto_code'] is None):
            raise ValueError("Missing the required parameter `crypto_code` when calling `store_on_chain_wallets_create_on_chain_transaction`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501
        if 'crypto_code' in params:
            path_params['cryptoCode'] = params['crypto_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/payment-methods/onchain/{cryptoCode}/wallet/transactions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def store_on_chain_wallets_get_on_chain_fee_rate(self, store_id, crypto_code, **kwargs):  # noqa: E501
        """Get store on-chain wallet fee rate  # noqa: E501

        Get wallet onchain fee rate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_on_chain_wallets_get_on_chain_fee_rate(store_id, crypto_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store to fetch (required)
        :param str crypto_code: The crypto code of the payment method to fetch (required)
        :param float block_target: The number of blocks away you are willing to target for confirmation. Defaults to the wallet's configured `RecommendedFeeBlockTarget`
        :return: OnChainWalletFeeRateData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.store_on_chain_wallets_get_on_chain_fee_rate_with_http_info(store_id, crypto_code, **kwargs)  # noqa: E501
        else:
            (data) = self.store_on_chain_wallets_get_on_chain_fee_rate_with_http_info(store_id, crypto_code, **kwargs)  # noqa: E501
            return data

    def store_on_chain_wallets_get_on_chain_fee_rate_with_http_info(self, store_id, crypto_code, **kwargs):  # noqa: E501
        """Get store on-chain wallet fee rate  # noqa: E501

        Get wallet onchain fee rate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_on_chain_wallets_get_on_chain_fee_rate_with_http_info(store_id, crypto_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store to fetch (required)
        :param str crypto_code: The crypto code of the payment method to fetch (required)
        :param float block_target: The number of blocks away you are willing to target for confirmation. Defaults to the wallet's configured `RecommendedFeeBlockTarget`
        :return: OnChainWalletFeeRateData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'crypto_code', 'block_target']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method store_on_chain_wallets_get_on_chain_fee_rate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `store_on_chain_wallets_get_on_chain_fee_rate`")  # noqa: E501
        # verify the required parameter 'crypto_code' is set
        if ('crypto_code' not in params or
                params['crypto_code'] is None):
            raise ValueError("Missing the required parameter `crypto_code` when calling `store_on_chain_wallets_get_on_chain_fee_rate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501
        if 'crypto_code' in params:
            path_params['cryptoCode'] = params['crypto_code']  # noqa: E501

        query_params = []
        if 'block_target' in params:
            query_params.append(('blockTarget', params['block_target']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/payment-methods/onchain/{cryptoCode}/wallet/feerate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OnChainWalletFeeRateData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def store_on_chain_wallets_get_on_chain_wallet_receive_address(self, store_id, crypto_code, **kwargs):  # noqa: E501
        """Get store on-chain wallet address  # noqa: E501

        Get or generate address for wallet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_on_chain_wallets_get_on_chain_wallet_receive_address(store_id, crypto_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store to fetch (required)
        :param str crypto_code: The crypto code of the payment method to fetch (required)
        :param bool force_generate: Whether to generate a new address for this request even if the previous one was not used
        :return: OnChainWalletAddressData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.store_on_chain_wallets_get_on_chain_wallet_receive_address_with_http_info(store_id, crypto_code, **kwargs)  # noqa: E501
        else:
            (data) = self.store_on_chain_wallets_get_on_chain_wallet_receive_address_with_http_info(store_id, crypto_code, **kwargs)  # noqa: E501
            return data

    def store_on_chain_wallets_get_on_chain_wallet_receive_address_with_http_info(self, store_id, crypto_code, **kwargs):  # noqa: E501
        """Get store on-chain wallet address  # noqa: E501

        Get or generate address for wallet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_on_chain_wallets_get_on_chain_wallet_receive_address_with_http_info(store_id, crypto_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store to fetch (required)
        :param str crypto_code: The crypto code of the payment method to fetch (required)
        :param bool force_generate: Whether to generate a new address for this request even if the previous one was not used
        :return: OnChainWalletAddressData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'crypto_code', 'force_generate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method store_on_chain_wallets_get_on_chain_wallet_receive_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `store_on_chain_wallets_get_on_chain_wallet_receive_address`")  # noqa: E501
        # verify the required parameter 'crypto_code' is set
        if ('crypto_code' not in params or
                params['crypto_code'] is None):
            raise ValueError("Missing the required parameter `crypto_code` when calling `store_on_chain_wallets_get_on_chain_wallet_receive_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501
        if 'crypto_code' in params:
            path_params['cryptoCode'] = params['crypto_code']  # noqa: E501

        query_params = []
        if 'force_generate' in params:
            query_params.append(('forceGenerate', params['force_generate']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/payment-methods/onchain/{cryptoCode}/wallet/address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OnChainWalletAddressData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def store_on_chain_wallets_get_on_chain_wallet_transaction(self, store_id, crypto_code, transaction_id, **kwargs):  # noqa: E501
        """Get store on-chain wallet transaction  # noqa: E501

        Get store on-chain wallet transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_on_chain_wallets_get_on_chain_wallet_transaction(store_id, crypto_code, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store to fetch (required)
        :param str crypto_code: The crypto code of the wallet to fetch (required)
        :param str transaction_id: The transaction id to fetch (required)
        :return: OnChainWalletTransactionData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.store_on_chain_wallets_get_on_chain_wallet_transaction_with_http_info(store_id, crypto_code, transaction_id, **kwargs)  # noqa: E501
        else:
            (data) = self.store_on_chain_wallets_get_on_chain_wallet_transaction_with_http_info(store_id, crypto_code, transaction_id, **kwargs)  # noqa: E501
            return data

    def store_on_chain_wallets_get_on_chain_wallet_transaction_with_http_info(self, store_id, crypto_code, transaction_id, **kwargs):  # noqa: E501
        """Get store on-chain wallet transaction  # noqa: E501

        Get store on-chain wallet transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_on_chain_wallets_get_on_chain_wallet_transaction_with_http_info(store_id, crypto_code, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store to fetch (required)
        :param str crypto_code: The crypto code of the wallet to fetch (required)
        :param str transaction_id: The transaction id to fetch (required)
        :return: OnChainWalletTransactionData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'crypto_code', 'transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method store_on_chain_wallets_get_on_chain_wallet_transaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `store_on_chain_wallets_get_on_chain_wallet_transaction`")  # noqa: E501
        # verify the required parameter 'crypto_code' is set
        if ('crypto_code' not in params or
                params['crypto_code'] is None):
            raise ValueError("Missing the required parameter `crypto_code` when calling `store_on_chain_wallets_get_on_chain_wallet_transaction`")  # noqa: E501
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params or
                params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `store_on_chain_wallets_get_on_chain_wallet_transaction`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501
        if 'crypto_code' in params:
            path_params['cryptoCode'] = params['crypto_code']  # noqa: E501
        if 'transaction_id' in params:
            path_params['transactionId'] = params['transaction_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/payment-methods/onchain/{cryptoCode}/wallet/transactions/{transactionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OnChainWalletTransactionData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def store_on_chain_wallets_get_on_chain_wallet_utx_os(self, store_id, crypto_code, **kwargs):  # noqa: E501
        """Get store on-chain wallet UTXOS  # noqa: E501

        Get store on-chain wallet utxos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_on_chain_wallets_get_on_chain_wallet_utx_os(store_id, crypto_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store to fetch (required)
        :param str crypto_code: The crypto code of the wallet to fetch (required)
        :return: list[OnChainWalletUTXOData]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.store_on_chain_wallets_get_on_chain_wallet_utx_os_with_http_info(store_id, crypto_code, **kwargs)  # noqa: E501
        else:
            (data) = self.store_on_chain_wallets_get_on_chain_wallet_utx_os_with_http_info(store_id, crypto_code, **kwargs)  # noqa: E501
            return data

    def store_on_chain_wallets_get_on_chain_wallet_utx_os_with_http_info(self, store_id, crypto_code, **kwargs):  # noqa: E501
        """Get store on-chain wallet UTXOS  # noqa: E501

        Get store on-chain wallet utxos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_on_chain_wallets_get_on_chain_wallet_utx_os_with_http_info(store_id, crypto_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store to fetch (required)
        :param str crypto_code: The crypto code of the wallet to fetch (required)
        :return: list[OnChainWalletUTXOData]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'crypto_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method store_on_chain_wallets_get_on_chain_wallet_utx_os" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `store_on_chain_wallets_get_on_chain_wallet_utx_os`")  # noqa: E501
        # verify the required parameter 'crypto_code' is set
        if ('crypto_code' not in params or
                params['crypto_code'] is None):
            raise ValueError("Missing the required parameter `crypto_code` when calling `store_on_chain_wallets_get_on_chain_wallet_utx_os`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501
        if 'crypto_code' in params:
            path_params['cryptoCode'] = params['crypto_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/payment-methods/onchain/{cryptoCode}/wallet/utxos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OnChainWalletUTXOData]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def store_on_chain_wallets_patch_on_chain_wallet_transaction(self, body, store_id, crypto_code, transaction_id, **kwargs):  # noqa: E501
        """Patch store on-chain wallet transaction info  # noqa: E501

        Patch store on-chain wallet transaction info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_on_chain_wallets_patch_on_chain_wallet_transaction(body, store_id, crypto_code, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOnChainTransactionRequest body: (required)
        :param str store_id: The store to fetch (required)
        :param str crypto_code: The crypto code of the wallet to fetch (required)
        :param str transaction_id: The transaction id to fetch (required)
        :return: OnChainWalletTransactionData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.store_on_chain_wallets_patch_on_chain_wallet_transaction_with_http_info(body, store_id, crypto_code, transaction_id, **kwargs)  # noqa: E501
        else:
            (data) = self.store_on_chain_wallets_patch_on_chain_wallet_transaction_with_http_info(body, store_id, crypto_code, transaction_id, **kwargs)  # noqa: E501
            return data

    def store_on_chain_wallets_patch_on_chain_wallet_transaction_with_http_info(self, body, store_id, crypto_code, transaction_id, **kwargs):  # noqa: E501
        """Patch store on-chain wallet transaction info  # noqa: E501

        Patch store on-chain wallet transaction info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_on_chain_wallets_patch_on_chain_wallet_transaction_with_http_info(body, store_id, crypto_code, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOnChainTransactionRequest body: (required)
        :param str store_id: The store to fetch (required)
        :param str crypto_code: The crypto code of the wallet to fetch (required)
        :param str transaction_id: The transaction id to fetch (required)
        :return: OnChainWalletTransactionData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'store_id', 'crypto_code', 'transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method store_on_chain_wallets_patch_on_chain_wallet_transaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `store_on_chain_wallets_patch_on_chain_wallet_transaction`")  # noqa: E501
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `store_on_chain_wallets_patch_on_chain_wallet_transaction`")  # noqa: E501
        # verify the required parameter 'crypto_code' is set
        if ('crypto_code' not in params or
                params['crypto_code'] is None):
            raise ValueError("Missing the required parameter `crypto_code` when calling `store_on_chain_wallets_patch_on_chain_wallet_transaction`")  # noqa: E501
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params or
                params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `store_on_chain_wallets_patch_on_chain_wallet_transaction`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501
        if 'crypto_code' in params:
            path_params['cryptoCode'] = params['crypto_code']  # noqa: E501
        if 'transaction_id' in params:
            path_params['transactionId'] = params['transaction_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/payment-methods/onchain/{cryptoCode}/wallet/transactions/{transactionId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OnChainWalletTransactionData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def store_on_chain_wallets_show_on_chain_wallet_overview(self, store_id, crypto_code, **kwargs):  # noqa: E501
        """Get store on-chain wallet overview  # noqa: E501

        View information about the specified wallet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_on_chain_wallets_show_on_chain_wallet_overview(store_id, crypto_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store to fetch (required)
        :param str crypto_code: The crypto code of the payment method to fetch (required)
        :return: OnChainWalletOverviewData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.store_on_chain_wallets_show_on_chain_wallet_overview_with_http_info(store_id, crypto_code, **kwargs)  # noqa: E501
        else:
            (data) = self.store_on_chain_wallets_show_on_chain_wallet_overview_with_http_info(store_id, crypto_code, **kwargs)  # noqa: E501
            return data

    def store_on_chain_wallets_show_on_chain_wallet_overview_with_http_info(self, store_id, crypto_code, **kwargs):  # noqa: E501
        """Get store on-chain wallet overview  # noqa: E501

        View information about the specified wallet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_on_chain_wallets_show_on_chain_wallet_overview_with_http_info(store_id, crypto_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store to fetch (required)
        :param str crypto_code: The crypto code of the payment method to fetch (required)
        :return: OnChainWalletOverviewData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'crypto_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method store_on_chain_wallets_show_on_chain_wallet_overview" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `store_on_chain_wallets_show_on_chain_wallet_overview`")  # noqa: E501
        # verify the required parameter 'crypto_code' is set
        if ('crypto_code' not in params or
                params['crypto_code'] is None):
            raise ValueError("Missing the required parameter `crypto_code` when calling `store_on_chain_wallets_show_on_chain_wallet_overview`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501
        if 'crypto_code' in params:
            path_params['cryptoCode'] = params['crypto_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/payment-methods/onchain/{cryptoCode}/wallet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OnChainWalletOverviewData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def store_on_chain_wallets_show_on_chain_wallet_transactions(self, store_id, crypto_code, **kwargs):  # noqa: E501
        """Get store on-chain wallet transactions  # noqa: E501

        Get store on-chain wallet transactions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_on_chain_wallets_show_on_chain_wallet_transactions(store_id, crypto_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store to fetch (required)
        :param str crypto_code: The crypto code of the wallet to fetch (required)
        :param list[TransactionStatus] status_filter: Statuses to filter the transactions with
        :param str label_filter: Transaction label to filter by
        :param int skip: Number of transactions to skip from the start
        :param int limit: Maximum number of transactions to return
        :return: list[OnChainWalletTransactionData]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.store_on_chain_wallets_show_on_chain_wallet_transactions_with_http_info(store_id, crypto_code, **kwargs)  # noqa: E501
        else:
            (data) = self.store_on_chain_wallets_show_on_chain_wallet_transactions_with_http_info(store_id, crypto_code, **kwargs)  # noqa: E501
            return data

    def store_on_chain_wallets_show_on_chain_wallet_transactions_with_http_info(self, store_id, crypto_code, **kwargs):  # noqa: E501
        """Get store on-chain wallet transactions  # noqa: E501

        Get store on-chain wallet transactions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_on_chain_wallets_show_on_chain_wallet_transactions_with_http_info(store_id, crypto_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store to fetch (required)
        :param str crypto_code: The crypto code of the wallet to fetch (required)
        :param list[TransactionStatus] status_filter: Statuses to filter the transactions with
        :param str label_filter: Transaction label to filter by
        :param int skip: Number of transactions to skip from the start
        :param int limit: Maximum number of transactions to return
        :return: list[OnChainWalletTransactionData]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'crypto_code', 'status_filter', 'label_filter', 'skip', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method store_on_chain_wallets_show_on_chain_wallet_transactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `store_on_chain_wallets_show_on_chain_wallet_transactions`")  # noqa: E501
        # verify the required parameter 'crypto_code' is set
        if ('crypto_code' not in params or
                params['crypto_code'] is None):
            raise ValueError("Missing the required parameter `crypto_code` when calling `store_on_chain_wallets_show_on_chain_wallet_transactions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501
        if 'crypto_code' in params:
            path_params['cryptoCode'] = params['crypto_code']  # noqa: E501

        query_params = []
        if 'status_filter' in params:
            query_params.append(('statusFilter', params['status_filter']))  # noqa: E501
            collection_formats['statusFilter'] = 'multi'  # noqa: E501
        if 'label_filter' in params:
            query_params.append(('labelFilter', params['label_filter']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/payment-methods/onchain/{cryptoCode}/wallet/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OnChainWalletTransactionData]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def store_on_chain_wallets_un_reserve_on_chain_wallet_receive_address(self, store_id, crypto_code, **kwargs):  # noqa: E501
        """UnReserve last store on-chain wallet address  # noqa: E501

        UnReserve address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_on_chain_wallets_un_reserve_on_chain_wallet_receive_address(store_id, crypto_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store to fetch (required)
        :param str crypto_code: The crypto code of the payment method to fetch (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.store_on_chain_wallets_un_reserve_on_chain_wallet_receive_address_with_http_info(store_id, crypto_code, **kwargs)  # noqa: E501
        else:
            (data) = self.store_on_chain_wallets_un_reserve_on_chain_wallet_receive_address_with_http_info(store_id, crypto_code, **kwargs)  # noqa: E501
            return data

    def store_on_chain_wallets_un_reserve_on_chain_wallet_receive_address_with_http_info(self, store_id, crypto_code, **kwargs):  # noqa: E501
        """UnReserve last store on-chain wallet address  # noqa: E501

        UnReserve address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_on_chain_wallets_un_reserve_on_chain_wallet_receive_address_with_http_info(store_id, crypto_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store to fetch (required)
        :param str crypto_code: The crypto code of the payment method to fetch (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'crypto_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method store_on_chain_wallets_un_reserve_on_chain_wallet_receive_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `store_on_chain_wallets_un_reserve_on_chain_wallet_receive_address`")  # noqa: E501
        # verify the required parameter 'crypto_code' is set
        if ('crypto_code' not in params or
                params['crypto_code'] is None):
            raise ValueError("Missing the required parameter `crypto_code` when calling `store_on_chain_wallets_un_reserve_on_chain_wallet_receive_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501
        if 'crypto_code' in params:
            path_params['cryptoCode'] = params['crypto_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/payment-methods/onchain/{cryptoCode}/wallet/address', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
