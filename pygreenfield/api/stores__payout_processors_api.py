# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pygreenfield.api_client import ApiClient


class StoresPayoutProcessorsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def greenfield_store_automated_lightning_payout_processors_controller_get_store_lightning_automated_payout_processors(self, store_id, payment_method, **kwargs):  # noqa: E501
        """Get configured store Lightning automated payout processors  # noqa: E501

        Get configured store Lightning automated payout processors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.greenfield_store_automated_lightning_payout_processors_controller_get_store_lightning_automated_payout_processors(store_id, payment_method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store to fetch (required)
        :param str payment_method: A specific payment method to fetch (required)
        :return: list[LightningAutomatedTransferSettings]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.greenfield_store_automated_lightning_payout_processors_controller_get_store_lightning_automated_payout_processors_with_http_info(store_id, payment_method, **kwargs)  # noqa: E501
        else:
            (data) = self.greenfield_store_automated_lightning_payout_processors_controller_get_store_lightning_automated_payout_processors_with_http_info(store_id, payment_method, **kwargs)  # noqa: E501
            return data

    def greenfield_store_automated_lightning_payout_processors_controller_get_store_lightning_automated_payout_processors_with_http_info(self, store_id, payment_method, **kwargs):  # noqa: E501
        """Get configured store Lightning automated payout processors  # noqa: E501

        Get configured store Lightning automated payout processors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.greenfield_store_automated_lightning_payout_processors_controller_get_store_lightning_automated_payout_processors_with_http_info(store_id, payment_method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store to fetch (required)
        :param str payment_method: A specific payment method to fetch (required)
        :return: list[LightningAutomatedTransferSettings]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'payment_method']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method greenfield_store_automated_lightning_payout_processors_controller_get_store_lightning_automated_payout_processors" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `greenfield_store_automated_lightning_payout_processors_controller_get_store_lightning_automated_payout_processors`")  # noqa: E501
        # verify the required parameter 'payment_method' is set
        if ('payment_method' not in params or
                params['payment_method'] is None):
            raise ValueError("Missing the required parameter `payment_method` when calling `greenfield_store_automated_lightning_payout_processors_controller_get_store_lightning_automated_payout_processors`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501
        if 'payment_method' in params:
            path_params['paymentMethod'] = params['payment_method']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/payout-processors/LightningAutomatedTransferSenderFactory/{paymentMethod}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[LightningAutomatedTransferSettings]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def greenfield_store_automated_lightning_payout_processors_controller_get_store_lightning_automated_payout_processors_0(self, store_id, **kwargs):  # noqa: E501
        """Get configured store Lightning automated payout processors  # noqa: E501

        Get configured store Lightning automated payout processors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.greenfield_store_automated_lightning_payout_processors_controller_get_store_lightning_automated_payout_processors_0(store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store to fetch (required)
        :return: list[LightningAutomatedTransferSettings]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.greenfield_store_automated_lightning_payout_processors_controller_get_store_lightning_automated_payout_processors_0_with_http_info(store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.greenfield_store_automated_lightning_payout_processors_controller_get_store_lightning_automated_payout_processors_0_with_http_info(store_id, **kwargs)  # noqa: E501
            return data

    def greenfield_store_automated_lightning_payout_processors_controller_get_store_lightning_automated_payout_processors_0_with_http_info(self, store_id, **kwargs):  # noqa: E501
        """Get configured store Lightning automated payout processors  # noqa: E501

        Get configured store Lightning automated payout processors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.greenfield_store_automated_lightning_payout_processors_controller_get_store_lightning_automated_payout_processors_0_with_http_info(store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store to fetch (required)
        :return: list[LightningAutomatedTransferSettings]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method greenfield_store_automated_lightning_payout_processors_controller_get_store_lightning_automated_payout_processors_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `greenfield_store_automated_lightning_payout_processors_controller_get_store_lightning_automated_payout_processors_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/payout-processors/LightningAutomatedTransferSenderFactory', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[LightningAutomatedTransferSettings]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def greenfield_store_automated_lightning_payout_processors_controller_update_store_lightning_automated_payout_processor(self, body, store_id, payment_method, **kwargs):  # noqa: E501
        """Update configured store Lightning automated payout processors  # noqa: E501

        Update configured store Lightning automated payout processors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.greenfield_store_automated_lightning_payout_processors_controller_update_store_lightning_automated_payout_processor(body, store_id, payment_method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateLightningAutomatedTransferSettings body: (required)
        :param str store_id: The store to fetch (required)
        :param str payment_method: A specific payment method to fetch (required)
        :return: LightningAutomatedTransferSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.greenfield_store_automated_lightning_payout_processors_controller_update_store_lightning_automated_payout_processor_with_http_info(body, store_id, payment_method, **kwargs)  # noqa: E501
        else:
            (data) = self.greenfield_store_automated_lightning_payout_processors_controller_update_store_lightning_automated_payout_processor_with_http_info(body, store_id, payment_method, **kwargs)  # noqa: E501
            return data

    def greenfield_store_automated_lightning_payout_processors_controller_update_store_lightning_automated_payout_processor_with_http_info(self, body, store_id, payment_method, **kwargs):  # noqa: E501
        """Update configured store Lightning automated payout processors  # noqa: E501

        Update configured store Lightning automated payout processors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.greenfield_store_automated_lightning_payout_processors_controller_update_store_lightning_automated_payout_processor_with_http_info(body, store_id, payment_method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateLightningAutomatedTransferSettings body: (required)
        :param str store_id: The store to fetch (required)
        :param str payment_method: A specific payment method to fetch (required)
        :return: LightningAutomatedTransferSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'store_id', 'payment_method']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method greenfield_store_automated_lightning_payout_processors_controller_update_store_lightning_automated_payout_processor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `greenfield_store_automated_lightning_payout_processors_controller_update_store_lightning_automated_payout_processor`")  # noqa: E501
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `greenfield_store_automated_lightning_payout_processors_controller_update_store_lightning_automated_payout_processor`")  # noqa: E501
        # verify the required parameter 'payment_method' is set
        if ('payment_method' not in params or
                params['payment_method'] is None):
            raise ValueError("Missing the required parameter `payment_method` when calling `greenfield_store_automated_lightning_payout_processors_controller_update_store_lightning_automated_payout_processor`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501
        if 'payment_method' in params:
            path_params['paymentMethod'] = params['payment_method']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/payout-processors/LightningAutomatedTransferSenderFactory/{paymentMethod}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LightningAutomatedTransferSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def greenfield_store_automated_on_chain_payout_processors_controller_get_store_on_chain_automated_payout_processors(self, store_id, payment_method, **kwargs):  # noqa: E501
        """Get configured store onchain automated payout processors  # noqa: E501

        Get configured store onchain automated payout processors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.greenfield_store_automated_on_chain_payout_processors_controller_get_store_on_chain_automated_payout_processors(store_id, payment_method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store to fetch (required)
        :param str payment_method: A specific payment method to fetch (required)
        :return: list[OnChainAutomatedTransferSettings]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.greenfield_store_automated_on_chain_payout_processors_controller_get_store_on_chain_automated_payout_processors_with_http_info(store_id, payment_method, **kwargs)  # noqa: E501
        else:
            (data) = self.greenfield_store_automated_on_chain_payout_processors_controller_get_store_on_chain_automated_payout_processors_with_http_info(store_id, payment_method, **kwargs)  # noqa: E501
            return data

    def greenfield_store_automated_on_chain_payout_processors_controller_get_store_on_chain_automated_payout_processors_with_http_info(self, store_id, payment_method, **kwargs):  # noqa: E501
        """Get configured store onchain automated payout processors  # noqa: E501

        Get configured store onchain automated payout processors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.greenfield_store_automated_on_chain_payout_processors_controller_get_store_on_chain_automated_payout_processors_with_http_info(store_id, payment_method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store to fetch (required)
        :param str payment_method: A specific payment method to fetch (required)
        :return: list[OnChainAutomatedTransferSettings]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'payment_method']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method greenfield_store_automated_on_chain_payout_processors_controller_get_store_on_chain_automated_payout_processors" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `greenfield_store_automated_on_chain_payout_processors_controller_get_store_on_chain_automated_payout_processors`")  # noqa: E501
        # verify the required parameter 'payment_method' is set
        if ('payment_method' not in params or
                params['payment_method'] is None):
            raise ValueError("Missing the required parameter `payment_method` when calling `greenfield_store_automated_on_chain_payout_processors_controller_get_store_on_chain_automated_payout_processors`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501
        if 'payment_method' in params:
            path_params['paymentMethod'] = params['payment_method']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/payout-processors/OnChainAutomatedTransferSenderFactory/{paymentMethod}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OnChainAutomatedTransferSettings]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def greenfield_store_automated_on_chain_payout_processors_controller_get_store_on_chain_automated_payout_processors_0(self, store_id, **kwargs):  # noqa: E501
        """Get configured store onchain automated payout processors  # noqa: E501

        Get configured store onchain automated payout processors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.greenfield_store_automated_on_chain_payout_processors_controller_get_store_on_chain_automated_payout_processors_0(store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store to fetch (required)
        :return: list[OnChainAutomatedTransferSettings]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.greenfield_store_automated_on_chain_payout_processors_controller_get_store_on_chain_automated_payout_processors_0_with_http_info(store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.greenfield_store_automated_on_chain_payout_processors_controller_get_store_on_chain_automated_payout_processors_0_with_http_info(store_id, **kwargs)  # noqa: E501
            return data

    def greenfield_store_automated_on_chain_payout_processors_controller_get_store_on_chain_automated_payout_processors_0_with_http_info(self, store_id, **kwargs):  # noqa: E501
        """Get configured store onchain automated payout processors  # noqa: E501

        Get configured store onchain automated payout processors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.greenfield_store_automated_on_chain_payout_processors_controller_get_store_on_chain_automated_payout_processors_0_with_http_info(store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store to fetch (required)
        :return: list[OnChainAutomatedTransferSettings]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method greenfield_store_automated_on_chain_payout_processors_controller_get_store_on_chain_automated_payout_processors_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `greenfield_store_automated_on_chain_payout_processors_controller_get_store_on_chain_automated_payout_processors_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/payout-processors/OnChainAutomatedTransferSenderFactory', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OnChainAutomatedTransferSettings]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def greenfield_store_automated_on_chain_payout_processors_controller_update_store_on_chain_automated_payout_processor(self, body, store_id, payment_method, **kwargs):  # noqa: E501
        """Update configured store onchain automated payout processors  # noqa: E501

        Update configured store onchain automated payout processors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.greenfield_store_automated_on_chain_payout_processors_controller_update_store_on_chain_automated_payout_processor(body, store_id, payment_method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateOnChainAutomatedTransferSettings body: (required)
        :param str store_id: The store to fetch (required)
        :param str payment_method: A specific payment method to fetch (required)
        :return: OnChainAutomatedTransferSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.greenfield_store_automated_on_chain_payout_processors_controller_update_store_on_chain_automated_payout_processor_with_http_info(body, store_id, payment_method, **kwargs)  # noqa: E501
        else:
            (data) = self.greenfield_store_automated_on_chain_payout_processors_controller_update_store_on_chain_automated_payout_processor_with_http_info(body, store_id, payment_method, **kwargs)  # noqa: E501
            return data

    def greenfield_store_automated_on_chain_payout_processors_controller_update_store_on_chain_automated_payout_processor_with_http_info(self, body, store_id, payment_method, **kwargs):  # noqa: E501
        """Update configured store onchain automated payout processors  # noqa: E501

        Update configured store onchain automated payout processors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.greenfield_store_automated_on_chain_payout_processors_controller_update_store_on_chain_automated_payout_processor_with_http_info(body, store_id, payment_method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateOnChainAutomatedTransferSettings body: (required)
        :param str store_id: The store to fetch (required)
        :param str payment_method: A specific payment method to fetch (required)
        :return: OnChainAutomatedTransferSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'store_id', 'payment_method']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method greenfield_store_automated_on_chain_payout_processors_controller_update_store_on_chain_automated_payout_processor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `greenfield_store_automated_on_chain_payout_processors_controller_update_store_on_chain_automated_payout_processor`")  # noqa: E501
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `greenfield_store_automated_on_chain_payout_processors_controller_update_store_on_chain_automated_payout_processor`")  # noqa: E501
        # verify the required parameter 'payment_method' is set
        if ('payment_method' not in params or
                params['payment_method'] is None):
            raise ValueError("Missing the required parameter `payment_method` when calling `greenfield_store_automated_on_chain_payout_processors_controller_update_store_on_chain_automated_payout_processor`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501
        if 'payment_method' in params:
            path_params['paymentMethod'] = params['payment_method']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/payout-processors/OnChainAutomatedTransferSenderFactory/{paymentMethod}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OnChainAutomatedTransferSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def greenfield_store_automated_on_chain_payout_processors_controller_update_store_on_chain_automated_payout_processor_0(self, body, store_id, payment_method, **kwargs):  # noqa: E501
        """Update configured store onchain automated payout processors  # noqa: E501

        Update configured store onchain automated payout processors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.greenfield_store_automated_on_chain_payout_processors_controller_update_store_on_chain_automated_payout_processor_0(body, store_id, payment_method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateOnChainAutomatedTransferSettings body: (required)
        :param str store_id: The store to fetch (required)
        :param str payment_method: A specific payment method to fetch (required)
        :return: OnChainAutomatedTransferSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.greenfield_store_automated_on_chain_payout_processors_controller_update_store_on_chain_automated_payout_processor_0_with_http_info(body, store_id, payment_method, **kwargs)  # noqa: E501
        else:
            (data) = self.greenfield_store_automated_on_chain_payout_processors_controller_update_store_on_chain_automated_payout_processor_0_with_http_info(body, store_id, payment_method, **kwargs)  # noqa: E501
            return data

    def greenfield_store_automated_on_chain_payout_processors_controller_update_store_on_chain_automated_payout_processor_0_with_http_info(self, body, store_id, payment_method, **kwargs):  # noqa: E501
        """Update configured store onchain automated payout processors  # noqa: E501

        Update configured store onchain automated payout processors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.greenfield_store_automated_on_chain_payout_processors_controller_update_store_on_chain_automated_payout_processor_0_with_http_info(body, store_id, payment_method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateOnChainAutomatedTransferSettings body: (required)
        :param str store_id: The store to fetch (required)
        :param str payment_method: A specific payment method to fetch (required)
        :return: OnChainAutomatedTransferSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'store_id', 'payment_method']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method greenfield_store_automated_on_chain_payout_processors_controller_update_store_on_chain_automated_payout_processor_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `greenfield_store_automated_on_chain_payout_processors_controller_update_store_on_chain_automated_payout_processor_0`")  # noqa: E501
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `greenfield_store_automated_on_chain_payout_processors_controller_update_store_on_chain_automated_payout_processor_0`")  # noqa: E501
        # verify the required parameter 'payment_method' is set
        if ('payment_method' not in params or
                params['payment_method'] is None):
            raise ValueError("Missing the required parameter `payment_method` when calling `greenfield_store_automated_on_chain_payout_processors_controller_update_store_on_chain_automated_payout_processor_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501
        if 'payment_method' in params:
            path_params['paymentMethod'] = params['payment_method']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/payout-processors/OnChainAutomatedTransferSenderFactory', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OnChainAutomatedTransferSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def store_payout_processors_get_store_payout_processors(self, store_id, **kwargs):  # noqa: E501
        """Get store configured payout processors  # noqa: E501

        Get store configured payout processors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_payout_processors_get_store_payout_processors(store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store to fetch (required)
        :return: list[PayoutProcessorData]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.store_payout_processors_get_store_payout_processors_with_http_info(store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.store_payout_processors_get_store_payout_processors_with_http_info(store_id, **kwargs)  # noqa: E501
            return data

    def store_payout_processors_get_store_payout_processors_with_http_info(self, store_id, **kwargs):  # noqa: E501
        """Get store configured payout processors  # noqa: E501

        Get store configured payout processors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_payout_processors_get_store_payout_processors_with_http_info(store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store to fetch (required)
        :return: list[PayoutProcessorData]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method store_payout_processors_get_store_payout_processors" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `store_payout_processors_get_store_payout_processors`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/payout-processors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PayoutProcessorData]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def store_payout_processors_remove_store_payout_processor(self, store_id, processor, payment_method, **kwargs):  # noqa: E501
        """Remove store configured payout processor  # noqa: E501

        Remove store configured payout processor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_payout_processors_remove_store_payout_processor(store_id, processor, payment_method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store (required)
        :param str processor: The processor (required)
        :param str payment_method: The payment method (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.store_payout_processors_remove_store_payout_processor_with_http_info(store_id, processor, payment_method, **kwargs)  # noqa: E501
        else:
            (data) = self.store_payout_processors_remove_store_payout_processor_with_http_info(store_id, processor, payment_method, **kwargs)  # noqa: E501
            return data

    def store_payout_processors_remove_store_payout_processor_with_http_info(self, store_id, processor, payment_method, **kwargs):  # noqa: E501
        """Remove store configured payout processor  # noqa: E501

        Remove store configured payout processor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_payout_processors_remove_store_payout_processor_with_http_info(store_id, processor, payment_method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store (required)
        :param str processor: The processor (required)
        :param str payment_method: The payment method (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'processor', 'payment_method']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method store_payout_processors_remove_store_payout_processor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `store_payout_processors_remove_store_payout_processor`")  # noqa: E501
        # verify the required parameter 'processor' is set
        if ('processor' not in params or
                params['processor'] is None):
            raise ValueError("Missing the required parameter `processor` when calling `store_payout_processors_remove_store_payout_processor`")  # noqa: E501
        # verify the required parameter 'payment_method' is set
        if ('payment_method' not in params or
                params['payment_method'] is None):
            raise ValueError("Missing the required parameter `payment_method` when calling `store_payout_processors_remove_store_payout_processor`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501
        if 'processor' in params:
            path_params['processor'] = params['processor']  # noqa: E501
        if 'payment_method' in params:
            path_params['paymentMethod'] = params['payment_method']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/payout-processors/{processor}/{paymentMethod}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
