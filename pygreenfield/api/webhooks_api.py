# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pygreenfield.api_client import ApiClient


class WebhooksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_stores_store_id_webhooks_post(self, body, store_id, **kwargs):  # noqa: E501
        """Create a new webhook  # noqa: E501

        Create a new webhook  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_stores_store_id_webhooks_post(body, store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebhookDataCreate body: (required)
        :param str store_id: The store id (required)
        :return: WebhookDataCreate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_stores_store_id_webhooks_post_with_http_info(body, store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_stores_store_id_webhooks_post_with_http_info(body, store_id, **kwargs)  # noqa: E501
            return data

    def api_v1_stores_store_id_webhooks_post_with_http_info(self, body, store_id, **kwargs):  # noqa: E501
        """Create a new webhook  # noqa: E501

        Create a new webhook  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_stores_store_id_webhooks_post_with_http_info(body, store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebhookDataCreate body: (required)
        :param str store_id: The store id (required)
        :return: WebhookDataCreate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_stores_store_id_webhooks_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_stores_store_id_webhooks_post`")  # noqa: E501
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `api_v1_stores_store_id_webhooks_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/webhooks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebhookDataCreate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_stores_store_id_webhooks_webhook_id_delete(self, store_id, webhook_id, **kwargs):  # noqa: E501
        """Delete a webhook  # noqa: E501

        Delete a webhook  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_stores_store_id_webhooks_webhook_id_delete(store_id, webhook_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id (required)
        :param str webhook_id: The webhook id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_stores_store_id_webhooks_webhook_id_delete_with_http_info(store_id, webhook_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_stores_store_id_webhooks_webhook_id_delete_with_http_info(store_id, webhook_id, **kwargs)  # noqa: E501
            return data

    def api_v1_stores_store_id_webhooks_webhook_id_delete_with_http_info(self, store_id, webhook_id, **kwargs):  # noqa: E501
        """Delete a webhook  # noqa: E501

        Delete a webhook  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_stores_store_id_webhooks_webhook_id_delete_with_http_info(store_id, webhook_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id (required)
        :param str webhook_id: The webhook id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'webhook_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_stores_store_id_webhooks_webhook_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `api_v1_stores_store_id_webhooks_webhook_id_delete`")  # noqa: E501
        # verify the required parameter 'webhook_id' is set
        if ('webhook_id' not in params or
                params['webhook_id'] is None):
            raise ValueError("Missing the required parameter `webhook_id` when calling `api_v1_stores_store_id_webhooks_webhook_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501
        if 'webhook_id' in params:
            path_params['webhookId'] = params['webhook_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/webhooks/{webhookId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_get(self, store_id, webhook_id, delivery_id, **kwargs):  # noqa: E501
        """Get a webhook delivery  # noqa: E501

        Information about a webhook delivery  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_get(store_id, webhook_id, delivery_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id (required)
        :param str webhook_id: The webhook id (required)
        :param str delivery_id: The id of the delivery (required)
        :return: WebhookDeliveryData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_get_with_http_info(store_id, webhook_id, delivery_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_get_with_http_info(store_id, webhook_id, delivery_id, **kwargs)  # noqa: E501
            return data

    def api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_get_with_http_info(self, store_id, webhook_id, delivery_id, **kwargs):  # noqa: E501
        """Get a webhook delivery  # noqa: E501

        Information about a webhook delivery  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_get_with_http_info(store_id, webhook_id, delivery_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id (required)
        :param str webhook_id: The webhook id (required)
        :param str delivery_id: The id of the delivery (required)
        :return: WebhookDeliveryData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'webhook_id', 'delivery_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_get`")  # noqa: E501
        # verify the required parameter 'webhook_id' is set
        if ('webhook_id' not in params or
                params['webhook_id'] is None):
            raise ValueError("Missing the required parameter `webhook_id` when calling `api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_get`")  # noqa: E501
        # verify the required parameter 'delivery_id' is set
        if ('delivery_id' not in params or
                params['delivery_id'] is None):
            raise ValueError("Missing the required parameter `delivery_id` when calling `api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501
        if 'webhook_id' in params:
            path_params['webhookId'] = params['webhook_id']  # noqa: E501
        if 'delivery_id' in params:
            path_params['deliveryId'] = params['delivery_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/webhooks/{webhookId}/deliveries/{deliveryId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebhookDeliveryData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_redeliver_post(self, store_id, webhook_id, delivery_id, **kwargs):  # noqa: E501
        """Redeliver the delivery  # noqa: E501

        Redeliver the delivery  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_redeliver_post(store_id, webhook_id, delivery_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id (required)
        :param str webhook_id: The webhook id (required)
        :param str delivery_id: The id of the delivery (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_redeliver_post_with_http_info(store_id, webhook_id, delivery_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_redeliver_post_with_http_info(store_id, webhook_id, delivery_id, **kwargs)  # noqa: E501
            return data

    def api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_redeliver_post_with_http_info(self, store_id, webhook_id, delivery_id, **kwargs):  # noqa: E501
        """Redeliver the delivery  # noqa: E501

        Redeliver the delivery  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_redeliver_post_with_http_info(store_id, webhook_id, delivery_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id (required)
        :param str webhook_id: The webhook id (required)
        :param str delivery_id: The id of the delivery (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'webhook_id', 'delivery_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_redeliver_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_redeliver_post`")  # noqa: E501
        # verify the required parameter 'webhook_id' is set
        if ('webhook_id' not in params or
                params['webhook_id'] is None):
            raise ValueError("Missing the required parameter `webhook_id` when calling `api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_redeliver_post`")  # noqa: E501
        # verify the required parameter 'delivery_id' is set
        if ('delivery_id' not in params or
                params['delivery_id'] is None):
            raise ValueError("Missing the required parameter `delivery_id` when calling `api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_redeliver_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501
        if 'webhook_id' in params:
            path_params['webhookId'] = params['webhook_id']  # noqa: E501
        if 'delivery_id' in params:
            path_params['deliveryId'] = params['delivery_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/webhooks/{webhookId}/deliveries/{deliveryId}/redeliver', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_request_get(self, store_id, webhook_id, delivery_id, **kwargs):  # noqa: E501
        """Get the delivery's request  # noqa: E501

        The delivery's JSON request sent to the endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_request_get(store_id, webhook_id, delivery_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id (required)
        :param str webhook_id: The webhook id (required)
        :param str delivery_id: The id of the delivery (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_request_get_with_http_info(store_id, webhook_id, delivery_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_request_get_with_http_info(store_id, webhook_id, delivery_id, **kwargs)  # noqa: E501
            return data

    def api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_request_get_with_http_info(self, store_id, webhook_id, delivery_id, **kwargs):  # noqa: E501
        """Get the delivery's request  # noqa: E501

        The delivery's JSON request sent to the endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_request_get_with_http_info(store_id, webhook_id, delivery_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id (required)
        :param str webhook_id: The webhook id (required)
        :param str delivery_id: The id of the delivery (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'webhook_id', 'delivery_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_request_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_request_get`")  # noqa: E501
        # verify the required parameter 'webhook_id' is set
        if ('webhook_id' not in params or
                params['webhook_id'] is None):
            raise ValueError("Missing the required parameter `webhook_id` when calling `api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_request_get`")  # noqa: E501
        # verify the required parameter 'delivery_id' is set
        if ('delivery_id' not in params or
                params['delivery_id'] is None):
            raise ValueError("Missing the required parameter `delivery_id` when calling `api_v1_stores_store_id_webhooks_webhook_id_deliveries_delivery_id_request_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501
        if 'webhook_id' in params:
            path_params['webhookId'] = params['webhook_id']  # noqa: E501
        if 'delivery_id' in params:
            path_params['deliveryId'] = params['delivery_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/webhooks/{webhookId}/deliveries/{deliveryId}/request', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_stores_store_id_webhooks_webhook_id_deliveries_get(self, store_id, webhook_id, **kwargs):  # noqa: E501
        """Get latest deliveries  # noqa: E501

        List the latest deliveries to the webhook, ordered from the most recent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_stores_store_id_webhooks_webhook_id_deliveries_get(store_id, webhook_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id (required)
        :param str webhook_id: The webhook id (required)
        :param str count: The number of latest deliveries to fetch
        :return: WebhookDeliveryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_stores_store_id_webhooks_webhook_id_deliveries_get_with_http_info(store_id, webhook_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_stores_store_id_webhooks_webhook_id_deliveries_get_with_http_info(store_id, webhook_id, **kwargs)  # noqa: E501
            return data

    def api_v1_stores_store_id_webhooks_webhook_id_deliveries_get_with_http_info(self, store_id, webhook_id, **kwargs):  # noqa: E501
        """Get latest deliveries  # noqa: E501

        List the latest deliveries to the webhook, ordered from the most recent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_stores_store_id_webhooks_webhook_id_deliveries_get_with_http_info(store_id, webhook_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id (required)
        :param str webhook_id: The webhook id (required)
        :param str count: The number of latest deliveries to fetch
        :return: WebhookDeliveryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'webhook_id', 'count']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_stores_store_id_webhooks_webhook_id_deliveries_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `api_v1_stores_store_id_webhooks_webhook_id_deliveries_get`")  # noqa: E501
        # verify the required parameter 'webhook_id' is set
        if ('webhook_id' not in params or
                params['webhook_id'] is None):
            raise ValueError("Missing the required parameter `webhook_id` when calling `api_v1_stores_store_id_webhooks_webhook_id_deliveries_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501
        if 'webhook_id' in params:
            path_params['webhookId'] = params['webhook_id']  # noqa: E501

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/webhooks/{webhookId}/deliveries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebhookDeliveryList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_stores_store_id_webhooks_webhook_id_put(self, body, store_id, webhook_id, **kwargs):  # noqa: E501
        """Update a webhook  # noqa: E501

        Update a webhook  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_stores_store_id_webhooks_webhook_id_put(body, store_id, webhook_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebhookDataBase body: (required)
        :param str store_id: The store id (required)
        :param str webhook_id: The webhook id (required)
        :return: WebhookData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_stores_store_id_webhooks_webhook_id_put_with_http_info(body, store_id, webhook_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_stores_store_id_webhooks_webhook_id_put_with_http_info(body, store_id, webhook_id, **kwargs)  # noqa: E501
            return data

    def api_v1_stores_store_id_webhooks_webhook_id_put_with_http_info(self, body, store_id, webhook_id, **kwargs):  # noqa: E501
        """Update a webhook  # noqa: E501

        Update a webhook  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_stores_store_id_webhooks_webhook_id_put_with_http_info(body, store_id, webhook_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebhookDataBase body: (required)
        :param str store_id: The store id (required)
        :param str webhook_id: The webhook id (required)
        :return: WebhookData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'store_id', 'webhook_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_stores_store_id_webhooks_webhook_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_stores_store_id_webhooks_webhook_id_put`")  # noqa: E501
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `api_v1_stores_store_id_webhooks_webhook_id_put`")  # noqa: E501
        # verify the required parameter 'webhook_id' is set
        if ('webhook_id' not in params or
                params['webhook_id'] is None):
            raise ValueError("Missing the required parameter `webhook_id` when calling `api_v1_stores_store_id_webhooks_webhook_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501
        if 'webhook_id' in params:
            path_params['webhookId'] = params['webhook_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/webhooks/{webhookId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebhookData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhokks_get_webhook(self, store_id, webhook_id, **kwargs):  # noqa: E501
        """Get a webhook of a store  # noqa: E501

        View webhook of a store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhokks_get_webhook(store_id, webhook_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id (required)
        :param str webhook_id: The webhook id (required)
        :return: WebhookData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webhokks_get_webhook_with_http_info(store_id, webhook_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webhokks_get_webhook_with_http_info(store_id, webhook_id, **kwargs)  # noqa: E501
            return data

    def webhokks_get_webhook_with_http_info(self, store_id, webhook_id, **kwargs):  # noqa: E501
        """Get a webhook of a store  # noqa: E501

        View webhook of a store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhokks_get_webhook_with_http_info(store_id, webhook_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id (required)
        :param str webhook_id: The webhook id (required)
        :return: WebhookData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'webhook_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhokks_get_webhook" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `webhokks_get_webhook`")  # noqa: E501
        # verify the required parameter 'webhook_id' is set
        if ('webhook_id' not in params or
                params['webhook_id'] is None):
            raise ValueError("Missing the required parameter `webhook_id` when calling `webhokks_get_webhook`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501
        if 'webhook_id' in params:
            path_params['webhookId'] = params['webhook_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/webhooks/{webhookId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebhookData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhokks_get_webhooks(self, store_id, **kwargs):  # noqa: E501
        """Get webhooks of a store  # noqa: E501

        View webhooks of a store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhokks_get_webhooks(store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id (required)
        :return: WebhookDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webhokks_get_webhooks_with_http_info(store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webhokks_get_webhooks_with_http_info(store_id, **kwargs)  # noqa: E501
            return data

    def webhokks_get_webhooks_with_http_info(self, store_id, **kwargs):  # noqa: E501
        """Get webhooks of a store  # noqa: E501

        View webhooks of a store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhokks_get_webhooks_with_http_info(store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id (required)
        :return: WebhookDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhokks_get_webhooks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `webhokks_get_webhooks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['storeId'] = params['store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API_Key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stores/{storeId}/webhooks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebhookDataList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
