# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicationServerInfoData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'onion': 'str',
        'supported_payment_methods': 'list[str]',
        'fully_synched': 'bool',
        'sync_status': 'list[ApplicationServerInfoSyncStatusData]'
    }

    attribute_map = {
        'version': 'version',
        'onion': 'onion',
        'supported_payment_methods': 'supportedPaymentMethods',
        'fully_synched': 'fullySynched',
        'sync_status': 'syncStatus'
    }

    def __init__(self, version=None, onion=None, supported_payment_methods=None, fully_synched=None, sync_status=None):  # noqa: E501
        """ApplicationServerInfoData - a model defined in Swagger"""  # noqa: E501
        self._version = None
        self._onion = None
        self._supported_payment_methods = None
        self._fully_synched = None
        self._sync_status = None
        self.discriminator = None
        if version is not None:
            self.version = version
        if onion is not None:
            self.onion = onion
        if supported_payment_methods is not None:
            self.supported_payment_methods = supported_payment_methods
        if fully_synched is not None:
            self.fully_synched = fully_synched
        if sync_status is not None:
            self.sync_status = sync_status

    @property
    def version(self):
        """Gets the version of this ApplicationServerInfoData.  # noqa: E501

        BTCPay Server version  # noqa: E501

        :return: The version of this ApplicationServerInfoData.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ApplicationServerInfoData.

        BTCPay Server version  # noqa: E501

        :param version: The version of this ApplicationServerInfoData.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def onion(self):
        """Gets the onion of this ApplicationServerInfoData.  # noqa: E501

        The Tor hostname  # noqa: E501

        :return: The onion of this ApplicationServerInfoData.  # noqa: E501
        :rtype: str
        """
        return self._onion

    @onion.setter
    def onion(self, onion):
        """Sets the onion of this ApplicationServerInfoData.

        The Tor hostname  # noqa: E501

        :param onion: The onion of this ApplicationServerInfoData.  # noqa: E501
        :type: str
        """

        self._onion = onion

    @property
    def supported_payment_methods(self):
        """Gets the supported_payment_methods of this ApplicationServerInfoData.  # noqa: E501

        The payment methods this server supports  # noqa: E501

        :return: The supported_payment_methods of this ApplicationServerInfoData.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_payment_methods

    @supported_payment_methods.setter
    def supported_payment_methods(self, supported_payment_methods):
        """Sets the supported_payment_methods of this ApplicationServerInfoData.

        The payment methods this server supports  # noqa: E501

        :param supported_payment_methods: The supported_payment_methods of this ApplicationServerInfoData.  # noqa: E501
        :type: list[str]
        """

        self._supported_payment_methods = supported_payment_methods

    @property
    def fully_synched(self):
        """Gets the fully_synched of this ApplicationServerInfoData.  # noqa: E501

        True if the instance is fully synchronized, according to NBXplorer  # noqa: E501

        :return: The fully_synched of this ApplicationServerInfoData.  # noqa: E501
        :rtype: bool
        """
        return self._fully_synched

    @fully_synched.setter
    def fully_synched(self, fully_synched):
        """Sets the fully_synched of this ApplicationServerInfoData.

        True if the instance is fully synchronized, according to NBXplorer  # noqa: E501

        :param fully_synched: The fully_synched of this ApplicationServerInfoData.  # noqa: E501
        :type: bool
        """

        self._fully_synched = fully_synched

    @property
    def sync_status(self):
        """Gets the sync_status of this ApplicationServerInfoData.  # noqa: E501


        :return: The sync_status of this ApplicationServerInfoData.  # noqa: E501
        :rtype: list[ApplicationServerInfoSyncStatusData]
        """
        return self._sync_status

    @sync_status.setter
    def sync_status(self, sync_status):
        """Sets the sync_status of this ApplicationServerInfoData.


        :param sync_status: The sync_status of this ApplicationServerInfoData.  # noqa: E501
        :type: list[ApplicationServerInfoSyncStatusData]
        """

        self._sync_status = sync_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationServerInfoData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationServerInfoData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
