# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicationServerInfoSyncStatusData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'crypto_code': 'str',
        'node_information': 'ApplicationServerInfoNodeStatusData',
        'chain_height': 'int',
        'sync_height': 'float',
        'available': 'bool'
    }

    attribute_map = {
        'crypto_code': 'cryptoCode',
        'node_information': 'nodeInformation',
        'chain_height': 'chainHeight',
        'sync_height': 'syncHeight',
        'available': 'available'
    }

    def __init__(self, crypto_code=None, node_information=None, chain_height=None, sync_height=None, available=None):  # noqa: E501
        """ApplicationServerInfoSyncStatusData - a model defined in Swagger"""  # noqa: E501
        self._crypto_code = None
        self._node_information = None
        self._chain_height = None
        self._sync_height = None
        self._available = None
        self.discriminator = None
        if crypto_code is not None:
            self.crypto_code = crypto_code
        if node_information is not None:
            self.node_information = node_information
        if chain_height is not None:
            self.chain_height = chain_height
        if sync_height is not None:
            self.sync_height = sync_height
        if available is not None:
            self.available = available

    @property
    def crypto_code(self):
        """Gets the crypto_code of this ApplicationServerInfoSyncStatusData.  # noqa: E501

        The CryptoCode of the crypto currency (eg. BTC)  # noqa: E501

        :return: The crypto_code of this ApplicationServerInfoSyncStatusData.  # noqa: E501
        :rtype: str
        """
        return self._crypto_code

    @crypto_code.setter
    def crypto_code(self, crypto_code):
        """Sets the crypto_code of this ApplicationServerInfoSyncStatusData.

        The CryptoCode of the crypto currency (eg. BTC)  # noqa: E501

        :param crypto_code: The crypto_code of this ApplicationServerInfoSyncStatusData.  # noqa: E501
        :type: str
        """

        self._crypto_code = crypto_code

    @property
    def node_information(self):
        """Gets the node_information of this ApplicationServerInfoSyncStatusData.  # noqa: E501


        :return: The node_information of this ApplicationServerInfoSyncStatusData.  # noqa: E501
        :rtype: ApplicationServerInfoNodeStatusData
        """
        return self._node_information

    @node_information.setter
    def node_information(self, node_information):
        """Sets the node_information of this ApplicationServerInfoSyncStatusData.


        :param node_information: The node_information of this ApplicationServerInfoSyncStatusData.  # noqa: E501
        :type: ApplicationServerInfoNodeStatusData
        """

        self._node_information = node_information

    @property
    def chain_height(self):
        """Gets the chain_height of this ApplicationServerInfoSyncStatusData.  # noqa: E501

        The height of the chain of header of the internal indexer  # noqa: E501

        :return: The chain_height of this ApplicationServerInfoSyncStatusData.  # noqa: E501
        :rtype: int
        """
        return self._chain_height

    @chain_height.setter
    def chain_height(self, chain_height):
        """Sets the chain_height of this ApplicationServerInfoSyncStatusData.

        The height of the chain of header of the internal indexer  # noqa: E501

        :param chain_height: The chain_height of this ApplicationServerInfoSyncStatusData.  # noqa: E501
        :type: int
        """

        self._chain_height = chain_height

    @property
    def sync_height(self):
        """Gets the sync_height of this ApplicationServerInfoSyncStatusData.  # noqa: E501

        The height of the latest indexed block of the internal indexer  # noqa: E501

        :return: The sync_height of this ApplicationServerInfoSyncStatusData.  # noqa: E501
        :rtype: float
        """
        return self._sync_height

    @sync_height.setter
    def sync_height(self, sync_height):
        """Sets the sync_height of this ApplicationServerInfoSyncStatusData.

        The height of the latest indexed block of the internal indexer  # noqa: E501

        :param sync_height: The sync_height of this ApplicationServerInfoSyncStatusData.  # noqa: E501
        :type: float
        """

        self._sync_height = sync_height

    @property
    def available(self):
        """Gets the available of this ApplicationServerInfoSyncStatusData.  # noqa: E501

        True if the full node and the indexer are fully synchronized  # noqa: E501

        :return: The available of this ApplicationServerInfoSyncStatusData.  # noqa: E501
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this ApplicationServerInfoSyncStatusData.

        True if the full node and the indexer are fully synchronized  # noqa: E501

        :param available: The available of this ApplicationServerInfoSyncStatusData.  # noqa: E501
        :type: bool
        """

        self._available = available

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationServerInfoSyncStatusData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationServerInfoSyncStatusData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
