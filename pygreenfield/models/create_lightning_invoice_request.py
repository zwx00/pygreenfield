# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateLightningInvoiceRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'str',
        'description': 'str',
        'description_hash': 'str',
        'expiry': 'AllOfCreateLightningInvoiceRequestExpiry',
        'private_route_hints': 'bool'
    }

    attribute_map = {
        'amount': 'amount',
        'description': 'description',
        'description_hash': 'descriptionHash',
        'expiry': 'expiry',
        'private_route_hints': 'privateRouteHints'
    }

    def __init__(self, amount=None, description=None, description_hash=None, expiry=None, private_route_hints=False):  # noqa: E501
        """CreateLightningInvoiceRequest - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._description = None
        self._description_hash = None
        self._expiry = None
        self._private_route_hints = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if description is not None:
            self.description = description
        if description_hash is not None:
            self.description_hash = description_hash
        if expiry is not None:
            self.expiry = expiry
        if private_route_hints is not None:
            self.private_route_hints = private_route_hints

    @property
    def amount(self):
        """Gets the amount of this CreateLightningInvoiceRequest.  # noqa: E501

        Amount wrapped in a string, represented in a millistatoshi string. (1000 millisatoshi = 1 satoshi)  # noqa: E501

        :return: The amount of this CreateLightningInvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreateLightningInvoiceRequest.

        Amount wrapped in a string, represented in a millistatoshi string. (1000 millisatoshi = 1 satoshi)  # noqa: E501

        :param amount: The amount of this CreateLightningInvoiceRequest.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def description(self):
        """Gets the description of this CreateLightningInvoiceRequest.  # noqa: E501

        Description of the invoice in the BOLT11  # noqa: E501

        :return: The description of this CreateLightningInvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateLightningInvoiceRequest.

        Description of the invoice in the BOLT11  # noqa: E501

        :param description: The description of this CreateLightningInvoiceRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def description_hash(self):
        """Gets the description_hash of this CreateLightningInvoiceRequest.  # noqa: E501

        Description hash of the invoice in the BOLT11  # noqa: E501

        :return: The description_hash of this CreateLightningInvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._description_hash

    @description_hash.setter
    def description_hash(self, description_hash):
        """Sets the description_hash of this CreateLightningInvoiceRequest.

        Description hash of the invoice in the BOLT11  # noqa: E501

        :param description_hash: The description_hash of this CreateLightningInvoiceRequest.  # noqa: E501
        :type: str
        """

        self._description_hash = description_hash

    @property
    def expiry(self):
        """Gets the expiry of this CreateLightningInvoiceRequest.  # noqa: E501

        Expiration time in seconds  # noqa: E501

        :return: The expiry of this CreateLightningInvoiceRequest.  # noqa: E501
        :rtype: AllOfCreateLightningInvoiceRequestExpiry
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this CreateLightningInvoiceRequest.

        Expiration time in seconds  # noqa: E501

        :param expiry: The expiry of this CreateLightningInvoiceRequest.  # noqa: E501
        :type: AllOfCreateLightningInvoiceRequestExpiry
        """

        self._expiry = expiry

    @property
    def private_route_hints(self):
        """Gets the private_route_hints of this CreateLightningInvoiceRequest.  # noqa: E501

        True if the invoice should include private route hints  # noqa: E501

        :return: The private_route_hints of this CreateLightningInvoiceRequest.  # noqa: E501
        :rtype: bool
        """
        return self._private_route_hints

    @private_route_hints.setter
    def private_route_hints(self, private_route_hints):
        """Sets the private_route_hints of this CreateLightningInvoiceRequest.

        True if the invoice should include private route hints  # noqa: E501

        :param private_route_hints: The private_route_hints of this CreateLightningInvoiceRequest.  # noqa: E501
        :type: bool
        """

        self._private_route_hints = private_route_hints

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateLightningInvoiceRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateLightningInvoiceRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
