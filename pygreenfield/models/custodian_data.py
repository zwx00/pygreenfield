# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustodianData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'label': 'str',
        'depositable_payment_methods': 'list',
        'withdrawable_payment_methods': 'list',
        'tradable_asset_pairs': 'list'
    }

    attribute_map = {
        'code': 'code',
        'label': 'label',
        'depositable_payment_methods': 'depositablePaymentMethods',
        'withdrawable_payment_methods': 'withdrawablePaymentMethods',
        'tradable_asset_pairs': 'tradableAssetPairs'
    }

    def __init__(self, code=None, label=None, depositable_payment_methods=None, withdrawable_payment_methods=None, tradable_asset_pairs=None):  # noqa: E501
        """CustodianData - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._label = None
        self._depositable_payment_methods = None
        self._withdrawable_payment_methods = None
        self._tradable_asset_pairs = None
        self.discriminator = None
        if code is not None:
            self.code = code
        if label is not None:
            self.label = label
        if depositable_payment_methods is not None:
            self.depositable_payment_methods = depositable_payment_methods
        if withdrawable_payment_methods is not None:
            self.withdrawable_payment_methods = withdrawable_payment_methods
        if tradable_asset_pairs is not None:
            self.tradable_asset_pairs = tradable_asset_pairs

    @property
    def code(self):
        """Gets the code of this CustodianData.  # noqa: E501

        The unique code of the custodian.  # noqa: E501

        :return: The code of this CustodianData.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CustodianData.

        The unique code of the custodian.  # noqa: E501

        :param code: The code of this CustodianData.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def label(self):
        """Gets the label of this CustodianData.  # noqa: E501

        The name of the custodian.  # noqa: E501

        :return: The label of this CustodianData.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CustodianData.

        The name of the custodian.  # noqa: E501

        :param label: The label of this CustodianData.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def depositable_payment_methods(self):
        """Gets the depositable_payment_methods of this CustodianData.  # noqa: E501

        A list of payment methods (crypto code + network) you can deposit to the custodian.  # noqa: E501

        :return: The depositable_payment_methods of this CustodianData.  # noqa: E501
        :rtype: list
        """
        return self._depositable_payment_methods

    @depositable_payment_methods.setter
    def depositable_payment_methods(self, depositable_payment_methods):
        """Sets the depositable_payment_methods of this CustodianData.

        A list of payment methods (crypto code + network) you can deposit to the custodian.  # noqa: E501

        :param depositable_payment_methods: The depositable_payment_methods of this CustodianData.  # noqa: E501
        :type: list
        """

        self._depositable_payment_methods = depositable_payment_methods

    @property
    def withdrawable_payment_methods(self):
        """Gets the withdrawable_payment_methods of this CustodianData.  # noqa: E501

        A list of payment methods (crypto code + network) you can withdraw from the custodian.  # noqa: E501

        :return: The withdrawable_payment_methods of this CustodianData.  # noqa: E501
        :rtype: list
        """
        return self._withdrawable_payment_methods

    @withdrawable_payment_methods.setter
    def withdrawable_payment_methods(self, withdrawable_payment_methods):
        """Sets the withdrawable_payment_methods of this CustodianData.

        A list of payment methods (crypto code + network) you can withdraw from the custodian.  # noqa: E501

        :param withdrawable_payment_methods: The withdrawable_payment_methods of this CustodianData.  # noqa: E501
        :type: list
        """

        self._withdrawable_payment_methods = withdrawable_payment_methods

    @property
    def tradable_asset_pairs(self):
        """Gets the tradable_asset_pairs of this CustodianData.  # noqa: E501

        A list of tradable asset pairs, or NULL if the custodian cannot trades/convert assets.  # noqa: E501

        :return: The tradable_asset_pairs of this CustodianData.  # noqa: E501
        :rtype: list
        """
        return self._tradable_asset_pairs

    @tradable_asset_pairs.setter
    def tradable_asset_pairs(self, tradable_asset_pairs):
        """Sets the tradable_asset_pairs of this CustodianData.

        A list of tradable asset pairs, or NULL if the custodian cannot trades/convert assets.  # noqa: E501

        :param tradable_asset_pairs: The tradable_asset_pairs of this CustodianData.  # noqa: E501
        :type: list
        """

        self._tradable_asset_pairs = tradable_asset_pairs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustodianData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustodianData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
