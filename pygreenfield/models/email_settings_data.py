# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmailSettingsData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'server': 'str',
        'port': 'float',
        'login': 'str',
        'password': 'str',
        '_from': 'str',
        'from_display': 'str'
    }

    attribute_map = {
        'server': 'server',
        'port': 'port',
        'login': 'login',
        'password': 'password',
        '_from': 'from',
        'from_display': 'fromDisplay'
    }

    def __init__(self, server=None, port=None, login=None, password=None, _from=None, from_display=None):  # noqa: E501
        """EmailSettingsData - a model defined in Swagger"""  # noqa: E501
        self._server = None
        self._port = None
        self._login = None
        self._password = None
        self.__from = None
        self._from_display = None
        self.discriminator = None
        if server is not None:
            self.server = server
        if port is not None:
            self.port = port
        if login is not None:
            self.login = login
        if password is not None:
            self.password = password
        if _from is not None:
            self._from = _from
        if from_display is not None:
            self.from_display = from_display

    @property
    def server(self):
        """Gets the server of this EmailSettingsData.  # noqa: E501

        Smtp server host  # noqa: E501

        :return: The server of this EmailSettingsData.  # noqa: E501
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this EmailSettingsData.

        Smtp server host  # noqa: E501

        :param server: The server of this EmailSettingsData.  # noqa: E501
        :type: str
        """

        self._server = server

    @property
    def port(self):
        """Gets the port of this EmailSettingsData.  # noqa: E501

        Smtp server port  # noqa: E501

        :return: The port of this EmailSettingsData.  # noqa: E501
        :rtype: float
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this EmailSettingsData.

        Smtp server port  # noqa: E501

        :param port: The port of this EmailSettingsData.  # noqa: E501
        :type: float
        """

        self._port = port

    @property
    def login(self):
        """Gets the login of this EmailSettingsData.  # noqa: E501

        Smtp server username  # noqa: E501

        :return: The login of this EmailSettingsData.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this EmailSettingsData.

        Smtp server username  # noqa: E501

        :param login: The login of this EmailSettingsData.  # noqa: E501
        :type: str
        """

        self._login = login

    @property
    def password(self):
        """Gets the password of this EmailSettingsData.  # noqa: E501

        Smtp server password  # noqa: E501

        :return: The password of this EmailSettingsData.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this EmailSettingsData.

        Smtp server password  # noqa: E501

        :param password: The password of this EmailSettingsData.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def _from(self):
        """Gets the _from of this EmailSettingsData.  # noqa: E501

        Email to send from  # noqa: E501

        :return: The _from of this EmailSettingsData.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this EmailSettingsData.

        Email to send from  # noqa: E501

        :param _from: The _from of this EmailSettingsData.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def from_display(self):
        """Gets the from_display of this EmailSettingsData.  # noqa: E501

        The name of the sender  # noqa: E501

        :return: The from_display of this EmailSettingsData.  # noqa: E501
        :rtype: str
        """
        return self._from_display

    @from_display.setter
    def from_display(self, from_display):
        """Sets the from_display of this EmailSettingsData.

        The name of the sender  # noqa: E501

        :param from_display: The from_display of this EmailSettingsData.  # noqa: E501
        :type: str
        """

        self._from_display = from_display

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmailSettingsData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailSettingsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
