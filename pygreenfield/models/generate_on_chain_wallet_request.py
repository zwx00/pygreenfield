# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GenerateOnChainWalletRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'existing_mnemonic': 'str',
        'passphrase': 'str',
        'account_number': 'float',
        'save_private_keys': 'bool',
        'import_keys_to_rpc': 'bool',
        'word_list': 'str',
        'word_count': 'float',
        'script_pub_key_type': 'str'
    }

    attribute_map = {
        'existing_mnemonic': 'existingMnemonic',
        'passphrase': 'passphrase',
        'account_number': 'accountNumber',
        'save_private_keys': 'savePrivateKeys',
        'import_keys_to_rpc': 'importKeysToRPC',
        'word_list': 'wordList',
        'word_count': 'wordCount',
        'script_pub_key_type': 'scriptPubKeyType'
    }

    def __init__(self, existing_mnemonic=None, passphrase=None, account_number=0, save_private_keys=False, import_keys_to_rpc=False, word_list='English', word_count=12, script_pub_key_type='Segwit'):  # noqa: E501
        """GenerateOnChainWalletRequest - a model defined in Swagger"""  # noqa: E501
        self._existing_mnemonic = None
        self._passphrase = None
        self._account_number = None
        self._save_private_keys = None
        self._import_keys_to_rpc = None
        self._word_list = None
        self._word_count = None
        self._script_pub_key_type = None
        self.discriminator = None
        if existing_mnemonic is not None:
            self.existing_mnemonic = existing_mnemonic
        if passphrase is not None:
            self.passphrase = passphrase
        if account_number is not None:
            self.account_number = account_number
        if save_private_keys is not None:
            self.save_private_keys = save_private_keys
        if import_keys_to_rpc is not None:
            self.import_keys_to_rpc = import_keys_to_rpc
        if word_list is not None:
            self.word_list = word_list
        if word_count is not None:
            self.word_count = word_count
        if script_pub_key_type is not None:
            self.script_pub_key_type = script_pub_key_type

    @property
    def existing_mnemonic(self):
        """Gets the existing_mnemonic of this GenerateOnChainWalletRequest.  # noqa: E501

        An existing BIP39 mnemonic seed to generate the wallet with  # noqa: E501

        :return: The existing_mnemonic of this GenerateOnChainWalletRequest.  # noqa: E501
        :rtype: str
        """
        return self._existing_mnemonic

    @existing_mnemonic.setter
    def existing_mnemonic(self, existing_mnemonic):
        """Sets the existing_mnemonic of this GenerateOnChainWalletRequest.

        An existing BIP39 mnemonic seed to generate the wallet with  # noqa: E501

        :param existing_mnemonic: The existing_mnemonic of this GenerateOnChainWalletRequest.  # noqa: E501
        :type: str
        """

        self._existing_mnemonic = existing_mnemonic

    @property
    def passphrase(self):
        """Gets the passphrase of this GenerateOnChainWalletRequest.  # noqa: E501

        A passphrase for the BIP39 mnemonic seed  # noqa: E501

        :return: The passphrase of this GenerateOnChainWalletRequest.  # noqa: E501
        :rtype: str
        """
        return self._passphrase

    @passphrase.setter
    def passphrase(self, passphrase):
        """Sets the passphrase of this GenerateOnChainWalletRequest.

        A passphrase for the BIP39 mnemonic seed  # noqa: E501

        :param passphrase: The passphrase of this GenerateOnChainWalletRequest.  # noqa: E501
        :type: str
        """

        self._passphrase = passphrase

    @property
    def account_number(self):
        """Gets the account_number of this GenerateOnChainWalletRequest.  # noqa: E501

        The account to derive from the BIP39 mnemonic seed  # noqa: E501

        :return: The account_number of this GenerateOnChainWalletRequest.  # noqa: E501
        :rtype: float
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this GenerateOnChainWalletRequest.

        The account to derive from the BIP39 mnemonic seed  # noqa: E501

        :param account_number: The account_number of this GenerateOnChainWalletRequest.  # noqa: E501
        :type: float
        """

        self._account_number = account_number

    @property
    def save_private_keys(self):
        """Gets the save_private_keys of this GenerateOnChainWalletRequest.  # noqa: E501

        Whether to store the seed inside BTCPay Server to enable some additional services. IF `false` AND `existingMnemonic` IS NOT SPECIFIED, BE SURE TO SECURELY STORE THE SEED IN THE RESPONSE!  # noqa: E501

        :return: The save_private_keys of this GenerateOnChainWalletRequest.  # noqa: E501
        :rtype: bool
        """
        return self._save_private_keys

    @save_private_keys.setter
    def save_private_keys(self, save_private_keys):
        """Sets the save_private_keys of this GenerateOnChainWalletRequest.

        Whether to store the seed inside BTCPay Server to enable some additional services. IF `false` AND `existingMnemonic` IS NOT SPECIFIED, BE SURE TO SECURELY STORE THE SEED IN THE RESPONSE!  # noqa: E501

        :param save_private_keys: The save_private_keys of this GenerateOnChainWalletRequest.  # noqa: E501
        :type: bool
        """

        self._save_private_keys = save_private_keys

    @property
    def import_keys_to_rpc(self):
        """Gets the import_keys_to_rpc of this GenerateOnChainWalletRequest.  # noqa: E501

        Whether to import all addresses generated via BTCPay Server into the underlying node wallet. (Private keys will also be imported if `savePrivateKeys` is set to true.  # noqa: E501

        :return: The import_keys_to_rpc of this GenerateOnChainWalletRequest.  # noqa: E501
        :rtype: bool
        """
        return self._import_keys_to_rpc

    @import_keys_to_rpc.setter
    def import_keys_to_rpc(self, import_keys_to_rpc):
        """Sets the import_keys_to_rpc of this GenerateOnChainWalletRequest.

        Whether to import all addresses generated via BTCPay Server into the underlying node wallet. (Private keys will also be imported if `savePrivateKeys` is set to true.  # noqa: E501

        :param import_keys_to_rpc: The import_keys_to_rpc of this GenerateOnChainWalletRequest.  # noqa: E501
        :type: bool
        """

        self._import_keys_to_rpc = import_keys_to_rpc

    @property
    def word_list(self):
        """Gets the word_list of this GenerateOnChainWalletRequest.  # noqa: E501

        If `existingMnemonic` is not set, a mnemonic is generated using the specified wordList.  # noqa: E501

        :return: The word_list of this GenerateOnChainWalletRequest.  # noqa: E501
        :rtype: str
        """
        return self._word_list

    @word_list.setter
    def word_list(self, word_list):
        """Sets the word_list of this GenerateOnChainWalletRequest.

        If `existingMnemonic` is not set, a mnemonic is generated using the specified wordList.  # noqa: E501

        :param word_list: The word_list of this GenerateOnChainWalletRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["English", "Japanese", "Spanish", "ChineseSimplified", "ChineseTraditional", "French", "PortugueseBrazil", "Czech"]  # noqa: E501
        if word_list not in allowed_values:
            raise ValueError(
                "Invalid value for `word_list` ({0}), must be one of {1}"  # noqa: E501
                .format(word_list, allowed_values)
            )

        self._word_list = word_list

    @property
    def word_count(self):
        """Gets the word_count of this GenerateOnChainWalletRequest.  # noqa: E501

        If `existingMnemonic` is not set, a mnemonic is generated using the specified wordCount.  # noqa: E501

        :return: The word_count of this GenerateOnChainWalletRequest.  # noqa: E501
        :rtype: float
        """
        return self._word_count

    @word_count.setter
    def word_count(self, word_count):
        """Sets the word_count of this GenerateOnChainWalletRequest.

        If `existingMnemonic` is not set, a mnemonic is generated using the specified wordCount.  # noqa: E501

        :param word_count: The word_count of this GenerateOnChainWalletRequest.  # noqa: E501
        :type: float
        """
        allowed_values = [12, 15, 18, 21, 24]  # noqa: E501
        if word_count not in allowed_values:
            raise ValueError(
                "Invalid value for `word_count` ({0}), must be one of {1}"  # noqa: E501
                .format(word_count, allowed_values)
            )

        self._word_count = word_count

    @property
    def script_pub_key_type(self):
        """Gets the script_pub_key_type of this GenerateOnChainWalletRequest.  # noqa: E501

        the type of wallet to generate  # noqa: E501

        :return: The script_pub_key_type of this GenerateOnChainWalletRequest.  # noqa: E501
        :rtype: str
        """
        return self._script_pub_key_type

    @script_pub_key_type.setter
    def script_pub_key_type(self, script_pub_key_type):
        """Sets the script_pub_key_type of this GenerateOnChainWalletRequest.

        the type of wallet to generate  # noqa: E501

        :param script_pub_key_type: The script_pub_key_type of this GenerateOnChainWalletRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Legacy", "Segwit", "SegwitP2SH"]  # noqa: E501
        if script_pub_key_type not in allowed_values:
            raise ValueError(
                "Invalid value for `script_pub_key_type` ({0}), must be one of {1}"  # noqa: E501
                .format(script_pub_key_type, allowed_values)
            )

        self._script_pub_key_type = script_pub_key_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenerateOnChainWalletRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerateOnChainWalletRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
