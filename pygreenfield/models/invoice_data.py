# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from pygreenfield.models.invoice_data_base import InvoiceDataBase  # noqa: F401,E501

class InvoiceData(InvoiceDataBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'store_id': 'str',
        'amount': 'str',
        'currency': 'str',
        'type': 'InvoiceType',
        'checkout_link': 'str',
        'created_time': 'object',
        'expiration_time': 'object',
        'monitoring_time': 'object',
        'status': 'InvoiceStatus',
        'additional_status': 'InvoiceAdditionalStatus',
        'available_statuses_for_manual_marking': 'list[InvoiceStatus]',
        'archived': 'bool'
    }
    if hasattr(InvoiceDataBase, "swagger_types"):
        swagger_types.update(InvoiceDataBase.swagger_types)

    attribute_map = {
        'id': 'id',
        'store_id': 'storeId',
        'amount': 'amount',
        'currency': 'currency',
        'type': 'type',
        'checkout_link': 'checkoutLink',
        'created_time': 'createdTime',
        'expiration_time': 'expirationTime',
        'monitoring_time': 'monitoringTime',
        'status': 'status',
        'additional_status': 'additionalStatus',
        'available_statuses_for_manual_marking': 'availableStatusesForManualMarking',
        'archived': 'archived'
    }
    if hasattr(InvoiceDataBase, "attribute_map"):
        attribute_map.update(InvoiceDataBase.attribute_map)

    def __init__(self, id=None, store_id=None, amount=None, currency=None, type=None, checkout_link=None, created_time=None, expiration_time=None, monitoring_time=None, status=None, additional_status=None, available_statuses_for_manual_marking=None, archived=None, *args, **kwargs):  # noqa: E501
        """InvoiceData - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._store_id = None
        self._amount = None
        self._currency = None
        self._type = None
        self._checkout_link = None
        self._created_time = None
        self._expiration_time = None
        self._monitoring_time = None
        self._status = None
        self._additional_status = None
        self._available_statuses_for_manual_marking = None
        self._archived = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if store_id is not None:
            self.store_id = store_id
        if amount is not None:
            self.amount = amount
        if currency is not None:
            self.currency = currency
        if type is not None:
            self.type = type
        if checkout_link is not None:
            self.checkout_link = checkout_link
        if created_time is not None:
            self.created_time = created_time
        if expiration_time is not None:
            self.expiration_time = expiration_time
        if monitoring_time is not None:
            self.monitoring_time = monitoring_time
        if status is not None:
            self.status = status
        if additional_status is not None:
            self.additional_status = additional_status
        if available_statuses_for_manual_marking is not None:
            self.available_statuses_for_manual_marking = available_statuses_for_manual_marking
        if archived is not None:
            self.archived = archived
        InvoiceDataBase.__init__(self, *args, **kwargs)

    @property
    def id(self):
        """Gets the id of this InvoiceData.  # noqa: E501

        The identifier of the invoice  # noqa: E501

        :return: The id of this InvoiceData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InvoiceData.

        The identifier of the invoice  # noqa: E501

        :param id: The id of this InvoiceData.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def store_id(self):
        """Gets the store_id of this InvoiceData.  # noqa: E501

        The store identifier that the invoice belongs to  # noqa: E501

        :return: The store_id of this InvoiceData.  # noqa: E501
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this InvoiceData.

        The store identifier that the invoice belongs to  # noqa: E501

        :param store_id: The store_id of this InvoiceData.  # noqa: E501
        :type: str
        """

        self._store_id = store_id

    @property
    def amount(self):
        """Gets the amount of this InvoiceData.  # noqa: E501

        The amount of the invoice  # noqa: E501

        :return: The amount of this InvoiceData.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InvoiceData.

        The amount of the invoice  # noqa: E501

        :param amount: The amount of this InvoiceData.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this InvoiceData.  # noqa: E501

        The currency of the invoice  # noqa: E501

        :return: The currency of this InvoiceData.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InvoiceData.

        The currency of the invoice  # noqa: E501

        :param currency: The currency of this InvoiceData.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def type(self):
        """Gets the type of this InvoiceData.  # noqa: E501


        :return: The type of this InvoiceData.  # noqa: E501
        :rtype: InvoiceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InvoiceData.


        :param type: The type of this InvoiceData.  # noqa: E501
        :type: InvoiceType
        """

        self._type = type

    @property
    def checkout_link(self):
        """Gets the checkout_link of this InvoiceData.  # noqa: E501

        The link to the checkout page, where you can redirect the customer  # noqa: E501

        :return: The checkout_link of this InvoiceData.  # noqa: E501
        :rtype: str
        """
        return self._checkout_link

    @checkout_link.setter
    def checkout_link(self, checkout_link):
        """Sets the checkout_link of this InvoiceData.

        The link to the checkout page, where you can redirect the customer  # noqa: E501

        :param checkout_link: The checkout_link of this InvoiceData.  # noqa: E501
        :type: str
        """

        self._checkout_link = checkout_link

    @property
    def created_time(self):
        """Gets the created_time of this InvoiceData.  # noqa: E501

        The creation time of the invoice  # noqa: E501

        :return: The created_time of this InvoiceData.  # noqa: E501
        :rtype: object
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this InvoiceData.

        The creation time of the invoice  # noqa: E501

        :param created_time: The created_time of this InvoiceData.  # noqa: E501
        :type: object
        """

        self._created_time = created_time

    @property
    def expiration_time(self):
        """Gets the expiration_time of this InvoiceData.  # noqa: E501

        The expiration time of the invoice  # noqa: E501

        :return: The expiration_time of this InvoiceData.  # noqa: E501
        :rtype: object
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this InvoiceData.

        The expiration time of the invoice  # noqa: E501

        :param expiration_time: The expiration_time of this InvoiceData.  # noqa: E501
        :type: object
        """

        self._expiration_time = expiration_time

    @property
    def monitoring_time(self):
        """Gets the monitoring_time of this InvoiceData.  # noqa: E501

        The monitoring time of the invoice  # noqa: E501

        :return: The monitoring_time of this InvoiceData.  # noqa: E501
        :rtype: object
        """
        return self._monitoring_time

    @monitoring_time.setter
    def monitoring_time(self, monitoring_time):
        """Sets the monitoring_time of this InvoiceData.

        The monitoring time of the invoice  # noqa: E501

        :param monitoring_time: The monitoring_time of this InvoiceData.  # noqa: E501
        :type: object
        """

        self._monitoring_time = monitoring_time

    @property
    def status(self):
        """Gets the status of this InvoiceData.  # noqa: E501


        :return: The status of this InvoiceData.  # noqa: E501
        :rtype: InvoiceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InvoiceData.


        :param status: The status of this InvoiceData.  # noqa: E501
        :type: InvoiceStatus
        """

        self._status = status

    @property
    def additional_status(self):
        """Gets the additional_status of this InvoiceData.  # noqa: E501


        :return: The additional_status of this InvoiceData.  # noqa: E501
        :rtype: InvoiceAdditionalStatus
        """
        return self._additional_status

    @additional_status.setter
    def additional_status(self, additional_status):
        """Sets the additional_status of this InvoiceData.


        :param additional_status: The additional_status of this InvoiceData.  # noqa: E501
        :type: InvoiceAdditionalStatus
        """

        self._additional_status = additional_status

    @property
    def available_statuses_for_manual_marking(self):
        """Gets the available_statuses_for_manual_marking of this InvoiceData.  # noqa: E501

        The statuses the invoice can be manually marked as  # noqa: E501

        :return: The available_statuses_for_manual_marking of this InvoiceData.  # noqa: E501
        :rtype: list[InvoiceStatus]
        """
        return self._available_statuses_for_manual_marking

    @available_statuses_for_manual_marking.setter
    def available_statuses_for_manual_marking(self, available_statuses_for_manual_marking):
        """Sets the available_statuses_for_manual_marking of this InvoiceData.

        The statuses the invoice can be manually marked as  # noqa: E501

        :param available_statuses_for_manual_marking: The available_statuses_for_manual_marking of this InvoiceData.  # noqa: E501
        :type: list[InvoiceStatus]
        """

        self._available_statuses_for_manual_marking = available_statuses_for_manual_marking

    @property
    def archived(self):
        """Gets the archived of this InvoiceData.  # noqa: E501

        true if the invoice is archived  # noqa: E501

        :return: The archived of this InvoiceData.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this InvoiceData.

        true if the invoice is archived  # noqa: E501

        :param archived: The archived of this InvoiceData.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoiceData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
