# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LightningChannelData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'remote_node': 'str',
        'is_public': 'bool',
        'is_active': 'bool',
        'capacity': 'str',
        'local_balance': 'str',
        'channel_point': 'str'
    }

    attribute_map = {
        'remote_node': 'remoteNode',
        'is_public': 'isPublic',
        'is_active': 'isActive',
        'capacity': 'capacity',
        'local_balance': 'localBalance',
        'channel_point': 'channelPoint'
    }

    def __init__(self, remote_node=None, is_public=None, is_active=None, capacity=None, local_balance=None, channel_point=None):  # noqa: E501
        """LightningChannelData - a model defined in Swagger"""  # noqa: E501
        self._remote_node = None
        self._is_public = None
        self._is_active = None
        self._capacity = None
        self._local_balance = None
        self._channel_point = None
        self.discriminator = None
        if remote_node is not None:
            self.remote_node = remote_node
        if is_public is not None:
            self.is_public = is_public
        if is_active is not None:
            self.is_active = is_active
        if capacity is not None:
            self.capacity = capacity
        if local_balance is not None:
            self.local_balance = local_balance
        if channel_point is not None:
            self.channel_point = channel_point

    @property
    def remote_node(self):
        """Gets the remote_node of this LightningChannelData.  # noqa: E501

        The public key of the node (Node ID)  # noqa: E501

        :return: The remote_node of this LightningChannelData.  # noqa: E501
        :rtype: str
        """
        return self._remote_node

    @remote_node.setter
    def remote_node(self, remote_node):
        """Sets the remote_node of this LightningChannelData.

        The public key of the node (Node ID)  # noqa: E501

        :param remote_node: The remote_node of this LightningChannelData.  # noqa: E501
        :type: str
        """

        self._remote_node = remote_node

    @property
    def is_public(self):
        """Gets the is_public of this LightningChannelData.  # noqa: E501

        Whether the node is public  # noqa: E501

        :return: The is_public of this LightningChannelData.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this LightningChannelData.

        Whether the node is public  # noqa: E501

        :param is_public: The is_public of this LightningChannelData.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def is_active(self):
        """Gets the is_active of this LightningChannelData.  # noqa: E501

        Whether the node is online  # noqa: E501

        :return: The is_active of this LightningChannelData.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this LightningChannelData.

        Whether the node is online  # noqa: E501

        :param is_active: The is_active of this LightningChannelData.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def capacity(self):
        """Gets the capacity of this LightningChannelData.  # noqa: E501

        The capacity of the channel in millisatoshi  # noqa: E501

        :return: The capacity of this LightningChannelData.  # noqa: E501
        :rtype: str
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this LightningChannelData.

        The capacity of the channel in millisatoshi  # noqa: E501

        :param capacity: The capacity of this LightningChannelData.  # noqa: E501
        :type: str
        """

        self._capacity = capacity

    @property
    def local_balance(self):
        """Gets the local_balance of this LightningChannelData.  # noqa: E501

        The local balance of the channel in millisatoshi  # noqa: E501

        :return: The local_balance of this LightningChannelData.  # noqa: E501
        :rtype: str
        """
        return self._local_balance

    @local_balance.setter
    def local_balance(self, local_balance):
        """Sets the local_balance of this LightningChannelData.

        The local balance of the channel in millisatoshi  # noqa: E501

        :param local_balance: The local_balance of this LightningChannelData.  # noqa: E501
        :type: str
        """

        self._local_balance = local_balance

    @property
    def channel_point(self):
        """Gets the channel_point of this LightningChannelData.  # noqa: E501


        :return: The channel_point of this LightningChannelData.  # noqa: E501
        :rtype: str
        """
        return self._channel_point

    @channel_point.setter
    def channel_point(self, channel_point):
        """Sets the channel_point of this LightningChannelData.


        :param channel_point: The channel_point of this LightningChannelData.  # noqa: E501
        :type: str
        """

        self._channel_point = channel_point

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LightningChannelData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LightningChannelData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
