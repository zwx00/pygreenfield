# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LNURLPayPaymentMethodBaseData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'use_bech32_scheme': 'bool',
        'enable_for_standard_invoices': 'bool',
        'lud12_enabled': 'bool'
    }

    attribute_map = {
        'use_bech32_scheme': 'useBech32Scheme',
        'enable_for_standard_invoices': 'enableForStandardInvoices',
        'lud12_enabled': 'lud12Enabled'
    }

    def __init__(self, use_bech32_scheme=None, enable_for_standard_invoices=None, lud12_enabled=None):  # noqa: E501
        """LNURLPayPaymentMethodBaseData - a model defined in Swagger"""  # noqa: E501
        self._use_bech32_scheme = None
        self._enable_for_standard_invoices = None
        self._lud12_enabled = None
        self.discriminator = None
        if use_bech32_scheme is not None:
            self.use_bech32_scheme = use_bech32_scheme
        if enable_for_standard_invoices is not None:
            self.enable_for_standard_invoices = enable_for_standard_invoices
        if lud12_enabled is not None:
            self.lud12_enabled = lud12_enabled

    @property
    def use_bech32_scheme(self):
        """Gets the use_bech32_scheme of this LNURLPayPaymentMethodBaseData.  # noqa: E501

        Whether to use [LUD-01](https://github.com/fiatjaf/lnurl-rfc/blob/luds/01.md)'s bech32 format or to use [LUD-17](https://github.com/fiatjaf/lnurl-rfc/blob/luds/17.md) url formatting.   # noqa: E501

        :return: The use_bech32_scheme of this LNURLPayPaymentMethodBaseData.  # noqa: E501
        :rtype: bool
        """
        return self._use_bech32_scheme

    @use_bech32_scheme.setter
    def use_bech32_scheme(self, use_bech32_scheme):
        """Sets the use_bech32_scheme of this LNURLPayPaymentMethodBaseData.

        Whether to use [LUD-01](https://github.com/fiatjaf/lnurl-rfc/blob/luds/01.md)'s bech32 format or to use [LUD-17](https://github.com/fiatjaf/lnurl-rfc/blob/luds/17.md) url formatting.   # noqa: E501

        :param use_bech32_scheme: The use_bech32_scheme of this LNURLPayPaymentMethodBaseData.  # noqa: E501
        :type: bool
        """

        self._use_bech32_scheme = use_bech32_scheme

    @property
    def enable_for_standard_invoices(self):
        """Gets the enable_for_standard_invoices of this LNURLPayPaymentMethodBaseData.  # noqa: E501

        Whether to allow this payment method to also be used for standard invoices and not just topup invoices.  # noqa: E501

        :return: The enable_for_standard_invoices of this LNURLPayPaymentMethodBaseData.  # noqa: E501
        :rtype: bool
        """
        return self._enable_for_standard_invoices

    @enable_for_standard_invoices.setter
    def enable_for_standard_invoices(self, enable_for_standard_invoices):
        """Sets the enable_for_standard_invoices of this LNURLPayPaymentMethodBaseData.

        Whether to allow this payment method to also be used for standard invoices and not just topup invoices.  # noqa: E501

        :param enable_for_standard_invoices: The enable_for_standard_invoices of this LNURLPayPaymentMethodBaseData.  # noqa: E501
        :type: bool
        """

        self._enable_for_standard_invoices = enable_for_standard_invoices

    @property
    def lud12_enabled(self):
        """Gets the lud12_enabled of this LNURLPayPaymentMethodBaseData.  # noqa: E501

        Allow comments to be passed on via lnurl.  # noqa: E501

        :return: The lud12_enabled of this LNURLPayPaymentMethodBaseData.  # noqa: E501
        :rtype: bool
        """
        return self._lud12_enabled

    @lud12_enabled.setter
    def lud12_enabled(self, lud12_enabled):
        """Sets the lud12_enabled of this LNURLPayPaymentMethodBaseData.

        Allow comments to be passed on via lnurl.  # noqa: E501

        :param lud12_enabled: The lud12_enabled of this LNURLPayPaymentMethodBaseData.  # noqa: E501
        :type: bool
        """

        self._lud12_enabled = lud12_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LNURLPayPaymentMethodBaseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LNURLPayPaymentMethodBaseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
