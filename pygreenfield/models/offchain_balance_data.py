# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OffchainBalanceData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'opening': 'str',
        'local': 'str',
        'remote': 'str',
        'closing': 'str'
    }

    attribute_map = {
        'opening': 'opening',
        'local': 'local',
        'remote': 'remote',
        'closing': 'closing'
    }

    def __init__(self, opening=None, local=None, remote=None, closing=None):  # noqa: E501
        """OffchainBalanceData - a model defined in Swagger"""  # noqa: E501
        self._opening = None
        self._local = None
        self._remote = None
        self._closing = None
        self.discriminator = None
        if opening is not None:
            self.opening = opening
        if local is not None:
            self.local = local
        if remote is not None:
            self.remote = remote
        if closing is not None:
            self.closing = closing

    @property
    def opening(self):
        """Gets the opening of this OffchainBalanceData.  # noqa: E501

        The amount of current channel openings in millisatoshi  # noqa: E501

        :return: The opening of this OffchainBalanceData.  # noqa: E501
        :rtype: str
        """
        return self._opening

    @opening.setter
    def opening(self, opening):
        """Sets the opening of this OffchainBalanceData.

        The amount of current channel openings in millisatoshi  # noqa: E501

        :param opening: The opening of this OffchainBalanceData.  # noqa: E501
        :type: str
        """

        self._opening = opening

    @property
    def local(self):
        """Gets the local of this OffchainBalanceData.  # noqa: E501

        The amount that is available on the local end of active channels in millisatoshi  # noqa: E501

        :return: The local of this OffchainBalanceData.  # noqa: E501
        :rtype: str
        """
        return self._local

    @local.setter
    def local(self, local):
        """Sets the local of this OffchainBalanceData.

        The amount that is available on the local end of active channels in millisatoshi  # noqa: E501

        :param local: The local of this OffchainBalanceData.  # noqa: E501
        :type: str
        """

        self._local = local

    @property
    def remote(self):
        """Gets the remote of this OffchainBalanceData.  # noqa: E501

        The amount that is available on the remote end of active channels in millisatoshi  # noqa: E501

        :return: The remote of this OffchainBalanceData.  # noqa: E501
        :rtype: str
        """
        return self._remote

    @remote.setter
    def remote(self, remote):
        """Sets the remote of this OffchainBalanceData.

        The amount that is available on the remote end of active channels in millisatoshi  # noqa: E501

        :param remote: The remote of this OffchainBalanceData.  # noqa: E501
        :type: str
        """

        self._remote = remote

    @property
    def closing(self):
        """Gets the closing of this OffchainBalanceData.  # noqa: E501

        The amount of current channel closings in millisatoshi  # noqa: E501

        :return: The closing of this OffchainBalanceData.  # noqa: E501
        :rtype: str
        """
        return self._closing

    @closing.setter
    def closing(self, closing):
        """Sets the closing of this OffchainBalanceData.

        The amount of current channel closings in millisatoshi  # noqa: E501

        :param closing: The closing of this OffchainBalanceData.  # noqa: E501
        :type: str
        """

        self._closing = closing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OffchainBalanceData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OffchainBalanceData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
