# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OnChainWalletUTXOData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment': 'str',
        'amount': 'str',
        'link': 'str',
        'outpoint': 'str',
        'timestamp': 'AllOfOnChainWalletUTXODataTimestamp',
        'key_path': 'str',
        'address': 'str',
        'confirmations': 'float',
        'labels': 'list[LabelData]'
    }

    attribute_map = {
        'comment': 'comment',
        'amount': 'amount',
        'link': 'link',
        'outpoint': 'outpoint',
        'timestamp': 'timestamp',
        'key_path': 'keyPath',
        'address': 'address',
        'confirmations': 'confirmations',
        'labels': 'labels'
    }

    def __init__(self, comment=None, amount=None, link=None, outpoint=None, timestamp=None, key_path=None, address=None, confirmations=None, labels=None):  # noqa: E501
        """OnChainWalletUTXOData - a model defined in Swagger"""  # noqa: E501
        self._comment = None
        self._amount = None
        self._link = None
        self._outpoint = None
        self._timestamp = None
        self._key_path = None
        self._address = None
        self._confirmations = None
        self._labels = None
        self.discriminator = None
        if comment is not None:
            self.comment = comment
        if amount is not None:
            self.amount = amount
        if link is not None:
            self.link = link
        if outpoint is not None:
            self.outpoint = outpoint
        if timestamp is not None:
            self.timestamp = timestamp
        if key_path is not None:
            self.key_path = key_path
        if address is not None:
            self.address = address
        if confirmations is not None:
            self.confirmations = confirmations
        if labels is not None:
            self.labels = labels

    @property
    def comment(self):
        """Gets the comment of this OnChainWalletUTXOData.  # noqa: E501

        A comment linked to this utxo  # noqa: E501

        :return: The comment of this OnChainWalletUTXOData.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this OnChainWalletUTXOData.

        A comment linked to this utxo  # noqa: E501

        :param comment: The comment of this OnChainWalletUTXOData.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def amount(self):
        """Gets the amount of this OnChainWalletUTXOData.  # noqa: E501

        the value of this utxo  # noqa: E501

        :return: The amount of this OnChainWalletUTXOData.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this OnChainWalletUTXOData.

        the value of this utxo  # noqa: E501

        :param amount: The amount of this OnChainWalletUTXOData.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def link(self):
        """Gets the link of this OnChainWalletUTXOData.  # noqa: E501

        a link to the configured blockchain explorer to view the utxo  # noqa: E501

        :return: The link of this OnChainWalletUTXOData.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this OnChainWalletUTXOData.

        a link to the configured blockchain explorer to view the utxo  # noqa: E501

        :param link: The link of this OnChainWalletUTXOData.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def outpoint(self):
        """Gets the outpoint of this OnChainWalletUTXOData.  # noqa: E501

        outpoint of this utxo  # noqa: E501

        :return: The outpoint of this OnChainWalletUTXOData.  # noqa: E501
        :rtype: str
        """
        return self._outpoint

    @outpoint.setter
    def outpoint(self, outpoint):
        """Sets the outpoint of this OnChainWalletUTXOData.

        outpoint of this utxo  # noqa: E501

        :param outpoint: The outpoint of this OnChainWalletUTXOData.  # noqa: E501
        :type: str
        """

        self._outpoint = outpoint

    @property
    def timestamp(self):
        """Gets the timestamp of this OnChainWalletUTXOData.  # noqa: E501

        The time of the utxo  # noqa: E501

        :return: The timestamp of this OnChainWalletUTXOData.  # noqa: E501
        :rtype: AllOfOnChainWalletUTXODataTimestamp
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this OnChainWalletUTXOData.

        The time of the utxo  # noqa: E501

        :param timestamp: The timestamp of this OnChainWalletUTXOData.  # noqa: E501
        :type: AllOfOnChainWalletUTXODataTimestamp
        """

        self._timestamp = timestamp

    @property
    def key_path(self):
        """Gets the key_path of this OnChainWalletUTXOData.  # noqa: E501

        the derivation path in relation to the HD account  # noqa: E501

        :return: The key_path of this OnChainWalletUTXOData.  # noqa: E501
        :rtype: str
        """
        return self._key_path

    @key_path.setter
    def key_path(self, key_path):
        """Sets the key_path of this OnChainWalletUTXOData.

        the derivation path in relation to the HD account  # noqa: E501

        :param key_path: The key_path of this OnChainWalletUTXOData.  # noqa: E501
        :type: str
        """

        self._key_path = key_path

    @property
    def address(self):
        """Gets the address of this OnChainWalletUTXOData.  # noqa: E501

        The wallet address of this utxo  # noqa: E501

        :return: The address of this OnChainWalletUTXOData.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this OnChainWalletUTXOData.

        The wallet address of this utxo  # noqa: E501

        :param address: The address of this OnChainWalletUTXOData.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def confirmations(self):
        """Gets the confirmations of this OnChainWalletUTXOData.  # noqa: E501

        The number of confirmations of this utxo  # noqa: E501

        :return: The confirmations of this OnChainWalletUTXOData.  # noqa: E501
        :rtype: float
        """
        return self._confirmations

    @confirmations.setter
    def confirmations(self, confirmations):
        """Sets the confirmations of this OnChainWalletUTXOData.

        The number of confirmations of this utxo  # noqa: E501

        :param confirmations: The confirmations of this OnChainWalletUTXOData.  # noqa: E501
        :type: float
        """

        self._confirmations = confirmations

    @property
    def labels(self):
        """Gets the labels of this OnChainWalletUTXOData.  # noqa: E501

        Labels linked to this transaction  # noqa: E501

        :return: The labels of this OnChainWalletUTXOData.  # noqa: E501
        :rtype: list[LabelData]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this OnChainWalletUTXOData.

        Labels linked to this transaction  # noqa: E501

        :param labels: The labels of this OnChainWalletUTXOData.  # noqa: E501
        :type: list[LabelData]
        """

        self._labels = labels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OnChainWalletUTXOData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OnChainWalletUTXOData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
