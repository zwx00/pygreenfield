# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PayLightningInvoiceRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bolt11': 'str',
        'amount': 'str',
        'max_fee_percent': 'str',
        'max_fee_flat': 'str'
    }

    attribute_map = {
        'bolt11': 'BOLT11',
        'amount': 'amount',
        'max_fee_percent': 'maxFeePercent',
        'max_fee_flat': 'maxFeeFlat'
    }

    def __init__(self, bolt11=None, amount=None, max_fee_percent=None, max_fee_flat=None):  # noqa: E501
        """PayLightningInvoiceRequest - a model defined in Swagger"""  # noqa: E501
        self._bolt11 = None
        self._amount = None
        self._max_fee_percent = None
        self._max_fee_flat = None
        self.discriminator = None
        if bolt11 is not None:
            self.bolt11 = bolt11
        if amount is not None:
            self.amount = amount
        if max_fee_percent is not None:
            self.max_fee_percent = max_fee_percent
        if max_fee_flat is not None:
            self.max_fee_flat = max_fee_flat

    @property
    def bolt11(self):
        """Gets the bolt11 of this PayLightningInvoiceRequest.  # noqa: E501

        The BOLT11 of the invoice to pay  # noqa: E501

        :return: The bolt11 of this PayLightningInvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._bolt11

    @bolt11.setter
    def bolt11(self, bolt11):
        """Sets the bolt11 of this PayLightningInvoiceRequest.

        The BOLT11 of the invoice to pay  # noqa: E501

        :param bolt11: The bolt11 of this PayLightningInvoiceRequest.  # noqa: E501
        :type: str
        """

        self._bolt11 = bolt11

    @property
    def amount(self):
        """Gets the amount of this PayLightningInvoiceRequest.  # noqa: E501

        Optional explicit payment amount in millisatoshi (if specified, it overrides the BOLT11 amount)  # noqa: E501

        :return: The amount of this PayLightningInvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PayLightningInvoiceRequest.

        Optional explicit payment amount in millisatoshi (if specified, it overrides the BOLT11 amount)  # noqa: E501

        :param amount: The amount of this PayLightningInvoiceRequest.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def max_fee_percent(self):
        """Gets the max_fee_percent of this PayLightningInvoiceRequest.  # noqa: E501

        The fee limit expressed as a percentage of the payment amount  # noqa: E501

        :return: The max_fee_percent of this PayLightningInvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._max_fee_percent

    @max_fee_percent.setter
    def max_fee_percent(self, max_fee_percent):
        """Sets the max_fee_percent of this PayLightningInvoiceRequest.

        The fee limit expressed as a percentage of the payment amount  # noqa: E501

        :param max_fee_percent: The max_fee_percent of this PayLightningInvoiceRequest.  # noqa: E501
        :type: str
        """

        self._max_fee_percent = max_fee_percent

    @property
    def max_fee_flat(self):
        """Gets the max_fee_flat of this PayLightningInvoiceRequest.  # noqa: E501

        The fee limit expressed as a fixed amount in satoshi  # noqa: E501

        :return: The max_fee_flat of this PayLightningInvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._max_fee_flat

    @max_fee_flat.setter
    def max_fee_flat(self, max_fee_flat):
        """Sets the max_fee_flat of this PayLightningInvoiceRequest.

        The fee limit expressed as a fixed amount in satoshi  # noqa: E501

        :param max_fee_flat: The max_fee_flat of this PayLightningInvoiceRequest.  # noqa: E501
        :type: str
        """

        self._max_fee_flat = max_fee_flat

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PayLightningInvoiceRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PayLightningInvoiceRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
