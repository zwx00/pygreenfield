# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from pygreenfield.models.payment_request_base_data import PaymentRequestBaseData  # noqa: F401,E501

class PaymentRequestData(PaymentRequestBaseData):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'store_id': 'str',
        'status': 'str',
        'created_time': 'object'
    }
    if hasattr(PaymentRequestBaseData, "swagger_types"):
        swagger_types.update(PaymentRequestBaseData.swagger_types)

    attribute_map = {
        'id': 'id',
        'store_id': 'storeId',
        'status': 'status',
        'created_time': 'createdTime'
    }
    if hasattr(PaymentRequestBaseData, "attribute_map"):
        attribute_map.update(PaymentRequestBaseData.attribute_map)

    def __init__(self, id=None, store_id=None, status=None, created_time=None, *args, **kwargs):  # noqa: E501
        """PaymentRequestData - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._store_id = None
        self._status = None
        self._created_time = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if store_id is not None:
            self.store_id = store_id
        if status is not None:
            self.status = status
        if created_time is not None:
            self.created_time = created_time
        PaymentRequestBaseData.__init__(self, *args, **kwargs)

    @property
    def id(self):
        """Gets the id of this PaymentRequestData.  # noqa: E501

        The id of the payment request  # noqa: E501

        :return: The id of this PaymentRequestData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentRequestData.

        The id of the payment request  # noqa: E501

        :param id: The id of this PaymentRequestData.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def store_id(self):
        """Gets the store_id of this PaymentRequestData.  # noqa: E501

        The store identifier that the payment request belongs to  # noqa: E501

        :return: The store_id of this PaymentRequestData.  # noqa: E501
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this PaymentRequestData.

        The store identifier that the payment request belongs to  # noqa: E501

        :param store_id: The store_id of this PaymentRequestData.  # noqa: E501
        :type: str
        """

        self._store_id = store_id

    @property
    def status(self):
        """Gets the status of this PaymentRequestData.  # noqa: E501

        The status of the payment request  # noqa: E501

        :return: The status of this PaymentRequestData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PaymentRequestData.

        The status of the payment request  # noqa: E501

        :param status: The status of this PaymentRequestData.  # noqa: E501
        :type: str
        """
        allowed_values = ["Pending", "Completed", "Expired"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def created_time(self):
        """Gets the created_time of this PaymentRequestData.  # noqa: E501

        The creation date of the payment request  # noqa: E501

        :return: The created_time of this PaymentRequestData.  # noqa: E501
        :rtype: object
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this PaymentRequestData.

        The creation date of the payment request  # noqa: E501

        :param created_time: The created_time of this PaymentRequestData.  # noqa: E501
        :type: object
        """

        self._created_time = created_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentRequestData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentRequestData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
