# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PullPaymentData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'currency': 'str',
        'amount': 'str',
        'period': 'int',
        'bolt11_expiration': 'str',
        'auto_approve_claims': 'bool',
        'archived': 'bool',
        'view_link': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'currency': 'currency',
        'amount': 'amount',
        'period': 'period',
        'bolt11_expiration': 'BOLT11Expiration',
        'auto_approve_claims': 'autoApproveClaims',
        'archived': 'archived',
        'view_link': 'viewLink'
    }

    def __init__(self, id=None, name=None, description=None, currency=None, amount=None, period=None, bolt11_expiration=None, auto_approve_claims=False, archived=None, view_link=None):  # noqa: E501
        """PullPaymentData - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._currency = None
        self._amount = None
        self._period = None
        self._bolt11_expiration = None
        self._auto_approve_claims = None
        self._archived = None
        self._view_link = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if currency is not None:
            self.currency = currency
        if amount is not None:
            self.amount = amount
        if period is not None:
            self.period = period
        if bolt11_expiration is not None:
            self.bolt11_expiration = bolt11_expiration
        if auto_approve_claims is not None:
            self.auto_approve_claims = auto_approve_claims
        if archived is not None:
            self.archived = archived
        if view_link is not None:
            self.view_link = view_link

    @property
    def id(self):
        """Gets the id of this PullPaymentData.  # noqa: E501

        Id of the pull payment  # noqa: E501

        :return: The id of this PullPaymentData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PullPaymentData.

        Id of the pull payment  # noqa: E501

        :param id: The id of this PullPaymentData.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PullPaymentData.  # noqa: E501

        Name given to pull payment when it was created  # noqa: E501

        :return: The name of this PullPaymentData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PullPaymentData.

        Name given to pull payment when it was created  # noqa: E501

        :param name: The name of this PullPaymentData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this PullPaymentData.  # noqa: E501

        Description given to pull payment when it was created  # noqa: E501

        :return: The description of this PullPaymentData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PullPaymentData.

        Description given to pull payment when it was created  # noqa: E501

        :param description: The description of this PullPaymentData.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def currency(self):
        """Gets the currency of this PullPaymentData.  # noqa: E501

        The currency of the pull payment's amount  # noqa: E501

        :return: The currency of this PullPaymentData.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PullPaymentData.

        The currency of the pull payment's amount  # noqa: E501

        :param currency: The currency of this PullPaymentData.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def amount(self):
        """Gets the amount of this PullPaymentData.  # noqa: E501

        The amount in the currency of this pull payment as a decimal string  # noqa: E501

        :return: The amount of this PullPaymentData.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PullPaymentData.

        The amount in the currency of this pull payment as a decimal string  # noqa: E501

        :param amount: The amount of this PullPaymentData.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def period(self):
        """Gets the period of this PullPaymentData.  # noqa: E501

        The length of each period in seconds  # noqa: E501

        :return: The period of this PullPaymentData.  # noqa: E501
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this PullPaymentData.

        The length of each period in seconds  # noqa: E501

        :param period: The period of this PullPaymentData.  # noqa: E501
        :type: int
        """

        self._period = period

    @property
    def bolt11_expiration(self):
        """Gets the bolt11_expiration of this PullPaymentData.  # noqa: E501

        If lightning is activated, do not accept BOLT11 invoices with expiration less than … days  # noqa: E501

        :return: The bolt11_expiration of this PullPaymentData.  # noqa: E501
        :rtype: str
        """
        return self._bolt11_expiration

    @bolt11_expiration.setter
    def bolt11_expiration(self, bolt11_expiration):
        """Sets the bolt11_expiration of this PullPaymentData.

        If lightning is activated, do not accept BOLT11 invoices with expiration less than … days  # noqa: E501

        :param bolt11_expiration: The bolt11_expiration of this PullPaymentData.  # noqa: E501
        :type: str
        """

        self._bolt11_expiration = bolt11_expiration

    @property
    def auto_approve_claims(self):
        """Gets the auto_approve_claims of this PullPaymentData.  # noqa: E501

        Any payouts created for this pull payment will skip the approval phase upon creation  # noqa: E501

        :return: The auto_approve_claims of this PullPaymentData.  # noqa: E501
        :rtype: bool
        """
        return self._auto_approve_claims

    @auto_approve_claims.setter
    def auto_approve_claims(self, auto_approve_claims):
        """Sets the auto_approve_claims of this PullPaymentData.

        Any payouts created for this pull payment will skip the approval phase upon creation  # noqa: E501

        :param auto_approve_claims: The auto_approve_claims of this PullPaymentData.  # noqa: E501
        :type: bool
        """

        self._auto_approve_claims = auto_approve_claims

    @property
    def archived(self):
        """Gets the archived of this PullPaymentData.  # noqa: E501

        Whether this pull payment is archived  # noqa: E501

        :return: The archived of this PullPaymentData.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this PullPaymentData.

        Whether this pull payment is archived  # noqa: E501

        :param archived: The archived of this PullPaymentData.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    @property
    def view_link(self):
        """Gets the view_link of this PullPaymentData.  # noqa: E501

        The link to a page to claim payouts to this pull payment  # noqa: E501

        :return: The view_link of this PullPaymentData.  # noqa: E501
        :rtype: str
        """
        return self._view_link

    @view_link.setter
    def view_link(self, view_link):
        """Sets the view_link of this PullPaymentData.

        The link to a page to claim payouts to this pull payment  # noqa: E501

        :param view_link: The view_link of this PullPaymentData.  # noqa: E501
        :type: str
        """

        self._view_link = view_link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PullPaymentData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PullPaymentData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
