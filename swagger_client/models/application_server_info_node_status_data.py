# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicationServerInfoNodeStatusData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'headers': 'int',
        'blocks': 'int',
        'verification_progress': 'float'
    }

    attribute_map = {
        'headers': 'headers',
        'blocks': 'blocks',
        'verification_progress': 'verificationProgress'
    }

    def __init__(self, headers=None, blocks=None, verification_progress=None):  # noqa: E501
        """ApplicationServerInfoNodeStatusData - a model defined in Swagger"""  # noqa: E501
        self._headers = None
        self._blocks = None
        self._verification_progress = None
        self.discriminator = None
        if headers is not None:
            self.headers = headers
        if blocks is not None:
            self.blocks = blocks
        if verification_progress is not None:
            self.verification_progress = verification_progress

    @property
    def headers(self):
        """Gets the headers of this ApplicationServerInfoNodeStatusData.  # noqa: E501

        The height of the chain of header of the internal full node  # noqa: E501

        :return: The headers of this ApplicationServerInfoNodeStatusData.  # noqa: E501
        :rtype: int
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this ApplicationServerInfoNodeStatusData.

        The height of the chain of header of the internal full node  # noqa: E501

        :param headers: The headers of this ApplicationServerInfoNodeStatusData.  # noqa: E501
        :type: int
        """

        self._headers = headers

    @property
    def blocks(self):
        """Gets the blocks of this ApplicationServerInfoNodeStatusData.  # noqa: E501

        The height of the latest validated block of the internal full node  # noqa: E501

        :return: The blocks of this ApplicationServerInfoNodeStatusData.  # noqa: E501
        :rtype: int
        """
        return self._blocks

    @blocks.setter
    def blocks(self, blocks):
        """Sets the blocks of this ApplicationServerInfoNodeStatusData.

        The height of the latest validated block of the internal full node  # noqa: E501

        :param blocks: The blocks of this ApplicationServerInfoNodeStatusData.  # noqa: E501
        :type: int
        """

        self._blocks = blocks

    @property
    def verification_progress(self):
        """Gets the verification_progress of this ApplicationServerInfoNodeStatusData.  # noqa: E501

        The current synchronization progress  # noqa: E501

        :return: The verification_progress of this ApplicationServerInfoNodeStatusData.  # noqa: E501
        :rtype: float
        """
        return self._verification_progress

    @verification_progress.setter
    def verification_progress(self, verification_progress):
        """Sets the verification_progress of this ApplicationServerInfoNodeStatusData.

        The current synchronization progress  # noqa: E501

        :param verification_progress: The verification_progress of this ApplicationServerInfoNodeStatusData.  # noqa: E501
        :type: float
        """

        self._verification_progress = verification_progress

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationServerInfoNodeStatusData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationServerInfoNodeStatusData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
