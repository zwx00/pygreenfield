# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BasicAppData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'store_id': 'str',
        'created': 'int',
        'app_type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'store_id': 'storeId',
        'created': 'created',
        'app_type': 'appType'
    }

    def __init__(self, id=None, name=None, store_id=None, created=None, app_type=None):  # noqa: E501
        """BasicAppData - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._store_id = None
        self._created = None
        self._app_type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if store_id is not None:
            self.store_id = store_id
        if created is not None:
            self.created = created
        if app_type is not None:
            self.app_type = app_type

    @property
    def id(self):
        """Gets the id of this BasicAppData.  # noqa: E501

        Id of the app  # noqa: E501

        :return: The id of this BasicAppData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BasicAppData.

        Id of the app  # noqa: E501

        :param id: The id of this BasicAppData.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this BasicAppData.  # noqa: E501

        Name given to the app when it was created  # noqa: E501

        :return: The name of this BasicAppData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BasicAppData.

        Name given to the app when it was created  # noqa: E501

        :param name: The name of this BasicAppData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def store_id(self):
        """Gets the store_id of this BasicAppData.  # noqa: E501

        Id of the store to which the app belongs  # noqa: E501

        :return: The store_id of this BasicAppData.  # noqa: E501
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this BasicAppData.

        Id of the store to which the app belongs  # noqa: E501

        :param store_id: The store_id of this BasicAppData.  # noqa: E501
        :type: str
        """

        self._store_id = store_id

    @property
    def created(self):
        """Gets the created of this BasicAppData.  # noqa: E501

        UNIX timestamp for when the app was created  # noqa: E501

        :return: The created of this BasicAppData.  # noqa: E501
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this BasicAppData.

        UNIX timestamp for when the app was created  # noqa: E501

        :param created: The created of this BasicAppData.  # noqa: E501
        :type: int
        """

        self._created = created

    @property
    def app_type(self):
        """Gets the app_type of this BasicAppData.  # noqa: E501

        Type of the app which was created  # noqa: E501

        :return: The app_type of this BasicAppData.  # noqa: E501
        :rtype: str
        """
        return self._app_type

    @app_type.setter
    def app_type(self, app_type):
        """Sets the app_type of this BasicAppData.

        Type of the app which was created  # noqa: E501

        :param app_type: The app_type of this BasicAppData.  # noqa: E501
        :type: str
        """

        self._app_type = app_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BasicAppData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BasicAppData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
