# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateOnChainTransactionRequestDestination(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination': 'str',
        'amount': 'str',
        'subtract_from_amount': 'bool'
    }

    attribute_map = {
        'destination': 'destination',
        'amount': 'amount',
        'subtract_from_amount': 'subtractFromAmount'
    }

    def __init__(self, destination=None, amount=None, subtract_from_amount=None):  # noqa: E501
        """CreateOnChainTransactionRequestDestination - a model defined in Swagger"""  # noqa: E501
        self._destination = None
        self._amount = None
        self._subtract_from_amount = None
        self.discriminator = None
        if destination is not None:
            self.destination = destination
        if amount is not None:
            self.amount = amount
        if subtract_from_amount is not None:
            self.subtract_from_amount = subtract_from_amount

    @property
    def destination(self):
        """Gets the destination of this CreateOnChainTransactionRequestDestination.  # noqa: E501

        A wallet address or a BIP21 payment link  # noqa: E501

        :return: The destination of this CreateOnChainTransactionRequestDestination.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this CreateOnChainTransactionRequestDestination.

        A wallet address or a BIP21 payment link  # noqa: E501

        :param destination: The destination of this CreateOnChainTransactionRequestDestination.  # noqa: E501
        :type: str
        """

        self._destination = destination

    @property
    def amount(self):
        """Gets the amount of this CreateOnChainTransactionRequestDestination.  # noqa: E501

        The amount to send. If `destination` is a BIP21 link, the amount must be the same or null.  # noqa: E501

        :return: The amount of this CreateOnChainTransactionRequestDestination.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreateOnChainTransactionRequestDestination.

        The amount to send. If `destination` is a BIP21 link, the amount must be the same or null.  # noqa: E501

        :param amount: The amount of this CreateOnChainTransactionRequestDestination.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def subtract_from_amount(self):
        """Gets the subtract_from_amount of this CreateOnChainTransactionRequestDestination.  # noqa: E501

        Whether to subtract the transaction fee from the provided amount. This makes the receiver receive less, or in other words: he or she pays the transaction fee. Also useful if you want to clear out your wallet. Must be false if `destination` is a BIP21 link  # noqa: E501

        :return: The subtract_from_amount of this CreateOnChainTransactionRequestDestination.  # noqa: E501
        :rtype: bool
        """
        return self._subtract_from_amount

    @subtract_from_amount.setter
    def subtract_from_amount(self, subtract_from_amount):
        """Sets the subtract_from_amount of this CreateOnChainTransactionRequestDestination.

        Whether to subtract the transaction fee from the provided amount. This makes the receiver receive less, or in other words: he or she pays the transaction fee. Also useful if you want to clear out your wallet. Must be false if `destination` is a BIP21 link  # noqa: E501

        :param subtract_from_amount: The subtract_from_amount of this CreateOnChainTransactionRequestDestination.  # noqa: E501
        :type: bool
        """

        self._subtract_from_amount = subtract_from_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateOnChainTransactionRequestDestination, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateOnChainTransactionRequestDestination):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
