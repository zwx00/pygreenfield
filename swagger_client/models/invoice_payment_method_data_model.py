# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvoicePaymentMethodDataModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payment_method': 'str',
        'crypto_code': 'str',
        'destination': 'str',
        'payment_link': 'str',
        'rate': 'str',
        'payment_method_paid': 'str',
        'total_paid': 'str',
        'due': 'str',
        'amount': 'str',
        'network_fee': 'str',
        'payments': 'list[Payment]',
        'activated': 'bool',
        'additional_data': 'AnyOfInvoicePaymentMethodDataModelAdditionalData'
    }

    attribute_map = {
        'payment_method': 'paymentMethod',
        'crypto_code': 'cryptoCode',
        'destination': 'destination',
        'payment_link': 'paymentLink',
        'rate': 'rate',
        'payment_method_paid': 'paymentMethodPaid',
        'total_paid': 'totalPaid',
        'due': 'due',
        'amount': 'amount',
        'network_fee': 'networkFee',
        'payments': 'payments',
        'activated': 'activated',
        'additional_data': 'additionalData'
    }

    def __init__(self, payment_method=None, crypto_code=None, destination=None, payment_link=None, rate=None, payment_method_paid=None, total_paid=None, due=None, amount=None, network_fee=None, payments=None, activated=None, additional_data=None):  # noqa: E501
        """InvoicePaymentMethodDataModel - a model defined in Swagger"""  # noqa: E501
        self._payment_method = None
        self._crypto_code = None
        self._destination = None
        self._payment_link = None
        self._rate = None
        self._payment_method_paid = None
        self._total_paid = None
        self._due = None
        self._amount = None
        self._network_fee = None
        self._payments = None
        self._activated = None
        self._additional_data = None
        self.discriminator = None
        if payment_method is not None:
            self.payment_method = payment_method
        if crypto_code is not None:
            self.crypto_code = crypto_code
        if destination is not None:
            self.destination = destination
        if payment_link is not None:
            self.payment_link = payment_link
        if rate is not None:
            self.rate = rate
        if payment_method_paid is not None:
            self.payment_method_paid = payment_method_paid
        if total_paid is not None:
            self.total_paid = total_paid
        if due is not None:
            self.due = due
        if amount is not None:
            self.amount = amount
        if network_fee is not None:
            self.network_fee = network_fee
        if payments is not None:
            self.payments = payments
        if activated is not None:
            self.activated = activated
        if additional_data is not None:
            self.additional_data = additional_data

    @property
    def payment_method(self):
        """Gets the payment_method of this InvoicePaymentMethodDataModel.  # noqa: E501

        Payment method available for the invoice (e.g., \"BTC\" or \"BTC-LightningNetwork\" or \"BTC-LNURLPAY\")  # noqa: E501

        :return: The payment_method of this InvoicePaymentMethodDataModel.  # noqa: E501
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this InvoicePaymentMethodDataModel.

        Payment method available for the invoice (e.g., \"BTC\" or \"BTC-LightningNetwork\" or \"BTC-LNURLPAY\")  # noqa: E501

        :param payment_method: The payment_method of this InvoicePaymentMethodDataModel.  # noqa: E501
        :type: str
        """

        self._payment_method = payment_method

    @property
    def crypto_code(self):
        """Gets the crypto_code of this InvoicePaymentMethodDataModel.  # noqa: E501

        Crypto code of the payment method (e.g., \"BTC\" or \"LTC\")  # noqa: E501

        :return: The crypto_code of this InvoicePaymentMethodDataModel.  # noqa: E501
        :rtype: str
        """
        return self._crypto_code

    @crypto_code.setter
    def crypto_code(self, crypto_code):
        """Sets the crypto_code of this InvoicePaymentMethodDataModel.

        Crypto code of the payment method (e.g., \"BTC\" or \"LTC\")  # noqa: E501

        :param crypto_code: The crypto_code of this InvoicePaymentMethodDataModel.  # noqa: E501
        :type: str
        """

        self._crypto_code = crypto_code

    @property
    def destination(self):
        """Gets the destination of this InvoicePaymentMethodDataModel.  # noqa: E501

        The destination the payment must be made to  # noqa: E501

        :return: The destination of this InvoicePaymentMethodDataModel.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this InvoicePaymentMethodDataModel.

        The destination the payment must be made to  # noqa: E501

        :param destination: The destination of this InvoicePaymentMethodDataModel.  # noqa: E501
        :type: str
        """

        self._destination = destination

    @property
    def payment_link(self):
        """Gets the payment_link of this InvoicePaymentMethodDataModel.  # noqa: E501

        A payment link that helps pay to the payment destination  # noqa: E501

        :return: The payment_link of this InvoicePaymentMethodDataModel.  # noqa: E501
        :rtype: str
        """
        return self._payment_link

    @payment_link.setter
    def payment_link(self, payment_link):
        """Sets the payment_link of this InvoicePaymentMethodDataModel.

        A payment link that helps pay to the payment destination  # noqa: E501

        :param payment_link: The payment_link of this InvoicePaymentMethodDataModel.  # noqa: E501
        :type: str
        """

        self._payment_link = payment_link

    @property
    def rate(self):
        """Gets the rate of this InvoicePaymentMethodDataModel.  # noqa: E501

        The rate between this payment method's currency and the invoice currency  # noqa: E501

        :return: The rate of this InvoicePaymentMethodDataModel.  # noqa: E501
        :rtype: str
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this InvoicePaymentMethodDataModel.

        The rate between this payment method's currency and the invoice currency  # noqa: E501

        :param rate: The rate of this InvoicePaymentMethodDataModel.  # noqa: E501
        :type: str
        """

        self._rate = rate

    @property
    def payment_method_paid(self):
        """Gets the payment_method_paid of this InvoicePaymentMethodDataModel.  # noqa: E501

        The amount paid by this payment method  # noqa: E501

        :return: The payment_method_paid of this InvoicePaymentMethodDataModel.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_paid

    @payment_method_paid.setter
    def payment_method_paid(self, payment_method_paid):
        """Sets the payment_method_paid of this InvoicePaymentMethodDataModel.

        The amount paid by this payment method  # noqa: E501

        :param payment_method_paid: The payment_method_paid of this InvoicePaymentMethodDataModel.  # noqa: E501
        :type: str
        """

        self._payment_method_paid = payment_method_paid

    @property
    def total_paid(self):
        """Gets the total_paid of this InvoicePaymentMethodDataModel.  # noqa: E501

        The total amount paid by all payment methods to the invoice, converted to this payment method's currency  # noqa: E501

        :return: The total_paid of this InvoicePaymentMethodDataModel.  # noqa: E501
        :rtype: str
        """
        return self._total_paid

    @total_paid.setter
    def total_paid(self, total_paid):
        """Sets the total_paid of this InvoicePaymentMethodDataModel.

        The total amount paid by all payment methods to the invoice, converted to this payment method's currency  # noqa: E501

        :param total_paid: The total_paid of this InvoicePaymentMethodDataModel.  # noqa: E501
        :type: str
        """

        self._total_paid = total_paid

    @property
    def due(self):
        """Gets the due of this InvoicePaymentMethodDataModel.  # noqa: E501

        The total amount left to be paid, converted to this payment method's currency (will be negative if overpaid)  # noqa: E501

        :return: The due of this InvoicePaymentMethodDataModel.  # noqa: E501
        :rtype: str
        """
        return self._due

    @due.setter
    def due(self, due):
        """Sets the due of this InvoicePaymentMethodDataModel.

        The total amount left to be paid, converted to this payment method's currency (will be negative if overpaid)  # noqa: E501

        :param due: The due of this InvoicePaymentMethodDataModel.  # noqa: E501
        :type: str
        """

        self._due = due

    @property
    def amount(self):
        """Gets the amount of this InvoicePaymentMethodDataModel.  # noqa: E501

        The invoice amount, converted to this payment method's currency  # noqa: E501

        :return: The amount of this InvoicePaymentMethodDataModel.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InvoicePaymentMethodDataModel.

        The invoice amount, converted to this payment method's currency  # noqa: E501

        :param amount: The amount of this InvoicePaymentMethodDataModel.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def network_fee(self):
        """Gets the network_fee of this InvoicePaymentMethodDataModel.  # noqa: E501

        The added merchant fee to pay for network costs of this payment method.  # noqa: E501

        :return: The network_fee of this InvoicePaymentMethodDataModel.  # noqa: E501
        :rtype: str
        """
        return self._network_fee

    @network_fee.setter
    def network_fee(self, network_fee):
        """Sets the network_fee of this InvoicePaymentMethodDataModel.

        The added merchant fee to pay for network costs of this payment method.  # noqa: E501

        :param network_fee: The network_fee of this InvoicePaymentMethodDataModel.  # noqa: E501
        :type: str
        """

        self._network_fee = network_fee

    @property
    def payments(self):
        """Gets the payments of this InvoicePaymentMethodDataModel.  # noqa: E501

        Payments made with this payment method.  # noqa: E501

        :return: The payments of this InvoicePaymentMethodDataModel.  # noqa: E501
        :rtype: list[Payment]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this InvoicePaymentMethodDataModel.

        Payments made with this payment method.  # noqa: E501

        :param payments: The payments of this InvoicePaymentMethodDataModel.  # noqa: E501
        :type: list[Payment]
        """

        self._payments = payments

    @property
    def activated(self):
        """Gets the activated of this InvoicePaymentMethodDataModel.  # noqa: E501

        If the payment method is activated (when lazy payments option is enabled  # noqa: E501

        :return: The activated of this InvoicePaymentMethodDataModel.  # noqa: E501
        :rtype: bool
        """
        return self._activated

    @activated.setter
    def activated(self, activated):
        """Sets the activated of this InvoicePaymentMethodDataModel.

        If the payment method is activated (when lazy payments option is enabled  # noqa: E501

        :param activated: The activated of this InvoicePaymentMethodDataModel.  # noqa: E501
        :type: bool
        """

        self._activated = activated

    @property
    def additional_data(self):
        """Gets the additional_data of this InvoicePaymentMethodDataModel.  # noqa: E501

        Additional data provided by the payment method.  # noqa: E501

        :return: The additional_data of this InvoicePaymentMethodDataModel.  # noqa: E501
        :rtype: AnyOfInvoicePaymentMethodDataModelAdditionalData
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this InvoicePaymentMethodDataModel.

        Additional data provided by the payment method.  # noqa: E501

        :param additional_data: The additional_data of this InvoicePaymentMethodDataModel.  # noqa: E501
        :type: AnyOfInvoicePaymentMethodDataModelAdditionalData
        """

        self._additional_data = additional_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoicePaymentMethodDataModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoicePaymentMethodDataModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
