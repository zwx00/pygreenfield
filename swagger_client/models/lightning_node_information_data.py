# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LightningNodeInformationData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'node_ur_is': 'list[str]',
        'block_height': 'int'
    }

    attribute_map = {
        'node_ur_is': 'nodeURIs',
        'block_height': 'blockHeight'
    }

    def __init__(self, node_ur_is=None, block_height=None):  # noqa: E501
        """LightningNodeInformationData - a model defined in Swagger"""  # noqa: E501
        self._node_ur_is = None
        self._block_height = None
        self.discriminator = None
        if node_ur_is is not None:
            self.node_ur_is = node_ur_is
        if block_height is not None:
            self.block_height = block_height

    @property
    def node_ur_is(self):
        """Gets the node_ur_is of this LightningNodeInformationData.  # noqa: E501

        Node URIs to connect to this node in the form `pubkey@endpoint[:port]`  # noqa: E501

        :return: The node_ur_is of this LightningNodeInformationData.  # noqa: E501
        :rtype: list[str]
        """
        return self._node_ur_is

    @node_ur_is.setter
    def node_ur_is(self, node_ur_is):
        """Sets the node_ur_is of this LightningNodeInformationData.

        Node URIs to connect to this node in the form `pubkey@endpoint[:port]`  # noqa: E501

        :param node_ur_is: The node_ur_is of this LightningNodeInformationData.  # noqa: E501
        :type: list[str]
        """

        self._node_ur_is = node_ur_is

    @property
    def block_height(self):
        """Gets the block_height of this LightningNodeInformationData.  # noqa: E501

        The block height of the lightning node  # noqa: E501

        :return: The block_height of this LightningNodeInformationData.  # noqa: E501
        :rtype: int
        """
        return self._block_height

    @block_height.setter
    def block_height(self, block_height):
        """Sets the block_height of this LightningNodeInformationData.

        The block height of the lightning node  # noqa: E501

        :param block_height: The block_height of this LightningNodeInformationData.  # noqa: E501
        :type: int
        """

        self._block_height = block_height

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LightningNodeInformationData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LightningNodeInformationData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
