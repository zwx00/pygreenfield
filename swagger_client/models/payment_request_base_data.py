# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaymentRequestBaseData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'str',
        'title': 'str',
        'currency': 'str',
        'email': 'str',
        'description': 'str',
        'expiry_date': 'AllOfPaymentRequestBaseDataExpiryDate',
        'embedded_css': 'str',
        'custom_css_link': 'str',
        'allow_custom_payment_amounts': 'bool'
    }

    attribute_map = {
        'amount': 'amount',
        'title': 'title',
        'currency': 'currency',
        'email': 'email',
        'description': 'description',
        'expiry_date': 'expiryDate',
        'embedded_css': 'embeddedCSS',
        'custom_css_link': 'customCSSLink',
        'allow_custom_payment_amounts': 'allowCustomPaymentAmounts'
    }

    def __init__(self, amount=None, title=None, currency=None, email=None, description=None, expiry_date=None, embedded_css=None, custom_css_link=None, allow_custom_payment_amounts=None):  # noqa: E501
        """PaymentRequestBaseData - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._title = None
        self._currency = None
        self._email = None
        self._description = None
        self._expiry_date = None
        self._embedded_css = None
        self._custom_css_link = None
        self._allow_custom_payment_amounts = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if title is not None:
            self.title = title
        if currency is not None:
            self.currency = currency
        if email is not None:
            self.email = email
        if description is not None:
            self.description = description
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if embedded_css is not None:
            self.embedded_css = embedded_css
        if custom_css_link is not None:
            self.custom_css_link = custom_css_link
        if allow_custom_payment_amounts is not None:
            self.allow_custom_payment_amounts = allow_custom_payment_amounts

    @property
    def amount(self):
        """Gets the amount of this PaymentRequestBaseData.  # noqa: E501

        The amount of the payment request  # noqa: E501

        :return: The amount of this PaymentRequestBaseData.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentRequestBaseData.

        The amount of the payment request  # noqa: E501

        :param amount: The amount of this PaymentRequestBaseData.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def title(self):
        """Gets the title of this PaymentRequestBaseData.  # noqa: E501

        The title of the payment request  # noqa: E501

        :return: The title of this PaymentRequestBaseData.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PaymentRequestBaseData.

        The title of the payment request  # noqa: E501

        :param title: The title of this PaymentRequestBaseData.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def currency(self):
        """Gets the currency of this PaymentRequestBaseData.  # noqa: E501

        The currency of the payment request. If empty, the store's default currency code will be used.  # noqa: E501

        :return: The currency of this PaymentRequestBaseData.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PaymentRequestBaseData.

        The currency of the payment request. If empty, the store's default currency code will be used.  # noqa: E501

        :param currency: The currency of this PaymentRequestBaseData.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def email(self):
        """Gets the email of this PaymentRequestBaseData.  # noqa: E501

        The email used in invoices generated by the payment request  # noqa: E501

        :return: The email of this PaymentRequestBaseData.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PaymentRequestBaseData.

        The email used in invoices generated by the payment request  # noqa: E501

        :param email: The email of this PaymentRequestBaseData.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def description(self):
        """Gets the description of this PaymentRequestBaseData.  # noqa: E501

        The description of the payment request  # noqa: E501

        :return: The description of this PaymentRequestBaseData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PaymentRequestBaseData.

        The description of the payment request  # noqa: E501

        :param description: The description of this PaymentRequestBaseData.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def expiry_date(self):
        """Gets the expiry_date of this PaymentRequestBaseData.  # noqa: E501

        The expiry date of the payment request  # noqa: E501

        :return: The expiry_date of this PaymentRequestBaseData.  # noqa: E501
        :rtype: AllOfPaymentRequestBaseDataExpiryDate
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this PaymentRequestBaseData.

        The expiry date of the payment request  # noqa: E501

        :param expiry_date: The expiry_date of this PaymentRequestBaseData.  # noqa: E501
        :type: AllOfPaymentRequestBaseDataExpiryDate
        """

        self._expiry_date = expiry_date

    @property
    def embedded_css(self):
        """Gets the embedded_css of this PaymentRequestBaseData.  # noqa: E501

        Custom CSS styling for the payment request  # noqa: E501

        :return: The embedded_css of this PaymentRequestBaseData.  # noqa: E501
        :rtype: str
        """
        return self._embedded_css

    @embedded_css.setter
    def embedded_css(self, embedded_css):
        """Sets the embedded_css of this PaymentRequestBaseData.

        Custom CSS styling for the payment request  # noqa: E501

        :param embedded_css: The embedded_css of this PaymentRequestBaseData.  # noqa: E501
        :type: str
        """

        self._embedded_css = embedded_css

    @property
    def custom_css_link(self):
        """Gets the custom_css_link of this PaymentRequestBaseData.  # noqa: E501

        Custom CSS link for styling the payment request  # noqa: E501

        :return: The custom_css_link of this PaymentRequestBaseData.  # noqa: E501
        :rtype: str
        """
        return self._custom_css_link

    @custom_css_link.setter
    def custom_css_link(self, custom_css_link):
        """Sets the custom_css_link of this PaymentRequestBaseData.

        Custom CSS link for styling the payment request  # noqa: E501

        :param custom_css_link: The custom_css_link of this PaymentRequestBaseData.  # noqa: E501
        :type: str
        """

        self._custom_css_link = custom_css_link

    @property
    def allow_custom_payment_amounts(self):
        """Gets the allow_custom_payment_amounts of this PaymentRequestBaseData.  # noqa: E501

        Whether to allow users to create invoices that partially pay the payment request   # noqa: E501

        :return: The allow_custom_payment_amounts of this PaymentRequestBaseData.  # noqa: E501
        :rtype: bool
        """
        return self._allow_custom_payment_amounts

    @allow_custom_payment_amounts.setter
    def allow_custom_payment_amounts(self, allow_custom_payment_amounts):
        """Sets the allow_custom_payment_amounts of this PaymentRequestBaseData.

        Whether to allow users to create invoices that partially pay the payment request   # noqa: E501

        :param allow_custom_payment_amounts: The allow_custom_payment_amounts of this PaymentRequestBaseData.  # noqa: E501
        :type: bool
        """

        self._allow_custom_payment_amounts = allow_custom_payment_amounts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentRequestBaseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentRequestBaseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
