# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PayoutProcessorData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'friendly_name': 'str',
        'payment_methods': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'friendly_name': 'friendlyName',
        'payment_methods': 'paymentMethods'
    }

    def __init__(self, name=None, friendly_name=None, payment_methods=None):  # noqa: E501
        """PayoutProcessorData - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._friendly_name = None
        self._payment_methods = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if friendly_name is not None:
            self.friendly_name = friendly_name
        if payment_methods is not None:
            self.payment_methods = payment_methods

    @property
    def name(self):
        """Gets the name of this PayoutProcessorData.  # noqa: E501

        unique identifier of the payout processor  # noqa: E501

        :return: The name of this PayoutProcessorData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PayoutProcessorData.

        unique identifier of the payout processor  # noqa: E501

        :param name: The name of this PayoutProcessorData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def friendly_name(self):
        """Gets the friendly_name of this PayoutProcessorData.  # noqa: E501

        Human name of the payout processor  # noqa: E501

        :return: The friendly_name of this PayoutProcessorData.  # noqa: E501
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this PayoutProcessorData.

        Human name of the payout processor  # noqa: E501

        :param friendly_name: The friendly_name of this PayoutProcessorData.  # noqa: E501
        :type: str
        """

        self._friendly_name = friendly_name

    @property
    def payment_methods(self):
        """Gets the payment_methods of this PayoutProcessorData.  # noqa: E501

        Supported, payment methods by this processor  # noqa: E501

        :return: The payment_methods of this PayoutProcessorData.  # noqa: E501
        :rtype: list[str]
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods):
        """Sets the payment_methods of this PayoutProcessorData.

        Supported, payment methods by this processor  # noqa: E501

        :param payment_methods: The payment_methods of this PayoutProcessorData.  # noqa: E501
        :type: list[str]
        """

        self._payment_methods = payment_methods

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PayoutProcessorData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PayoutProcessorData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
