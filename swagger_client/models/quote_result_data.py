# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QuoteResultData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'from_asset': 'str',
        'to_asset': 'str',
        'bid': 'float',
        'ask': 'float'
    }

    attribute_map = {
        'from_asset': 'fromAsset',
        'to_asset': 'toAsset',
        'bid': 'bid',
        'ask': 'ask'
    }

    def __init__(self, from_asset=None, to_asset=None, bid=None, ask=None):  # noqa: E501
        """QuoteResultData - a model defined in Swagger"""  # noqa: E501
        self._from_asset = None
        self._to_asset = None
        self._bid = None
        self._ask = None
        self.discriminator = None
        if from_asset is not None:
            self.from_asset = from_asset
        if to_asset is not None:
            self.to_asset = to_asset
        if bid is not None:
            self.bid = bid
        if ask is not None:
            self.ask = ask

    @property
    def from_asset(self):
        """Gets the from_asset of this QuoteResultData.  # noqa: E501

        The asset to trade.  # noqa: E501

        :return: The from_asset of this QuoteResultData.  # noqa: E501
        :rtype: str
        """
        return self._from_asset

    @from_asset.setter
    def from_asset(self, from_asset):
        """Sets the from_asset of this QuoteResultData.

        The asset to trade.  # noqa: E501

        :param from_asset: The from_asset of this QuoteResultData.  # noqa: E501
        :type: str
        """

        self._from_asset = from_asset

    @property
    def to_asset(self):
        """Gets the to_asset of this QuoteResultData.  # noqa: E501

        The asset you want.  # noqa: E501

        :return: The to_asset of this QuoteResultData.  # noqa: E501
        :rtype: str
        """
        return self._to_asset

    @to_asset.setter
    def to_asset(self, to_asset):
        """Sets the to_asset of this QuoteResultData.

        The asset you want.  # noqa: E501

        :param to_asset: The to_asset of this QuoteResultData.  # noqa: E501
        :type: str
        """

        self._to_asset = to_asset

    @property
    def bid(self):
        """Gets the bid of this QuoteResultData.  # noqa: E501

        The bid price.  # noqa: E501

        :return: The bid of this QuoteResultData.  # noqa: E501
        :rtype: float
        """
        return self._bid

    @bid.setter
    def bid(self, bid):
        """Sets the bid of this QuoteResultData.

        The bid price.  # noqa: E501

        :param bid: The bid of this QuoteResultData.  # noqa: E501
        :type: float
        """

        self._bid = bid

    @property
    def ask(self):
        """Gets the ask of this QuoteResultData.  # noqa: E501

        The ask price  # noqa: E501

        :return: The ask of this QuoteResultData.  # noqa: E501
        :rtype: float
        """
        return self._ask

    @ask.setter
    def ask(self, ask):
        """Sets the ask of this QuoteResultData.

        The ask price  # noqa: E501

        :param ask: The ask of this QuoteResultData.  # noqa: E501
        :type: float
        """

        self._ask = ask

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuoteResultData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuoteResultData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
