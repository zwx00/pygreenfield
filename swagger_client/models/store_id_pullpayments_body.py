# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StoreIdPullpaymentsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'amount': 'str',
        'currency': 'str',
        'period': 'int',
        'bolt11_expiration': 'str',
        'auto_approve_claims': 'bool',
        'starts_at': 'int',
        'expires_at': 'int',
        'payment_methods': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'amount': 'amount',
        'currency': 'currency',
        'period': 'period',
        'bolt11_expiration': 'BOLT11Expiration',
        'auto_approve_claims': 'autoApproveClaims',
        'starts_at': 'startsAt',
        'expires_at': 'expiresAt',
        'payment_methods': 'paymentMethods'
    }

    def __init__(self, name=None, description=None, amount=None, currency=None, period=None, bolt11_expiration='30', auto_approve_claims=False, starts_at=None, expires_at=None, payment_methods=None):  # noqa: E501
        """StoreIdPullpaymentsBody - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._amount = None
        self._currency = None
        self._period = None
        self._bolt11_expiration = None
        self._auto_approve_claims = None
        self._starts_at = None
        self._expires_at = None
        self._payment_methods = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if amount is not None:
            self.amount = amount
        if currency is not None:
            self.currency = currency
        if period is not None:
            self.period = period
        if bolt11_expiration is not None:
            self.bolt11_expiration = bolt11_expiration
        if auto_approve_claims is not None:
            self.auto_approve_claims = auto_approve_claims
        if starts_at is not None:
            self.starts_at = starts_at
        if expires_at is not None:
            self.expires_at = expires_at
        if payment_methods is not None:
            self.payment_methods = payment_methods

    @property
    def name(self):
        """Gets the name of this StoreIdPullpaymentsBody.  # noqa: E501

        The name of the pull payment  # noqa: E501

        :return: The name of this StoreIdPullpaymentsBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StoreIdPullpaymentsBody.

        The name of the pull payment  # noqa: E501

        :param name: The name of this StoreIdPullpaymentsBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this StoreIdPullpaymentsBody.  # noqa: E501

        The description of the pull payment  # noqa: E501

        :return: The description of this StoreIdPullpaymentsBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StoreIdPullpaymentsBody.

        The description of the pull payment  # noqa: E501

        :param description: The description of this StoreIdPullpaymentsBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def amount(self):
        """Gets the amount of this StoreIdPullpaymentsBody.  # noqa: E501

        The amount in `currency` of this pull payment as a decimal string  # noqa: E501

        :return: The amount of this StoreIdPullpaymentsBody.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this StoreIdPullpaymentsBody.

        The amount in `currency` of this pull payment as a decimal string  # noqa: E501

        :param amount: The amount of this StoreIdPullpaymentsBody.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this StoreIdPullpaymentsBody.  # noqa: E501

        The currency of the amount.  # noqa: E501

        :return: The currency of this StoreIdPullpaymentsBody.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this StoreIdPullpaymentsBody.

        The currency of the amount.  # noqa: E501

        :param currency: The currency of this StoreIdPullpaymentsBody.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def period(self):
        """Gets the period of this StoreIdPullpaymentsBody.  # noqa: E501

        The length of each period in seconds.  # noqa: E501

        :return: The period of this StoreIdPullpaymentsBody.  # noqa: E501
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this StoreIdPullpaymentsBody.

        The length of each period in seconds.  # noqa: E501

        :param period: The period of this StoreIdPullpaymentsBody.  # noqa: E501
        :type: int
        """

        self._period = period

    @property
    def bolt11_expiration(self):
        """Gets the bolt11_expiration of this StoreIdPullpaymentsBody.  # noqa: E501

        If lightning is activated, do not accept BOLT11 invoices with expiration less than … days  # noqa: E501

        :return: The bolt11_expiration of this StoreIdPullpaymentsBody.  # noqa: E501
        :rtype: str
        """
        return self._bolt11_expiration

    @bolt11_expiration.setter
    def bolt11_expiration(self, bolt11_expiration):
        """Sets the bolt11_expiration of this StoreIdPullpaymentsBody.

        If lightning is activated, do not accept BOLT11 invoices with expiration less than … days  # noqa: E501

        :param bolt11_expiration: The bolt11_expiration of this StoreIdPullpaymentsBody.  # noqa: E501
        :type: str
        """

        self._bolt11_expiration = bolt11_expiration

    @property
    def auto_approve_claims(self):
        """Gets the auto_approve_claims of this StoreIdPullpaymentsBody.  # noqa: E501

        Any payouts created for this pull payment will skip the approval phase upon creation  # noqa: E501

        :return: The auto_approve_claims of this StoreIdPullpaymentsBody.  # noqa: E501
        :rtype: bool
        """
        return self._auto_approve_claims

    @auto_approve_claims.setter
    def auto_approve_claims(self, auto_approve_claims):
        """Sets the auto_approve_claims of this StoreIdPullpaymentsBody.

        Any payouts created for this pull payment will skip the approval phase upon creation  # noqa: E501

        :param auto_approve_claims: The auto_approve_claims of this StoreIdPullpaymentsBody.  # noqa: E501
        :type: bool
        """

        self._auto_approve_claims = auto_approve_claims

    @property
    def starts_at(self):
        """Gets the starts_at of this StoreIdPullpaymentsBody.  # noqa: E501

        When this pull payment is effective. Already started if null or unspecified.  # noqa: E501

        :return: The starts_at of this StoreIdPullpaymentsBody.  # noqa: E501
        :rtype: int
        """
        return self._starts_at

    @starts_at.setter
    def starts_at(self, starts_at):
        """Sets the starts_at of this StoreIdPullpaymentsBody.

        When this pull payment is effective. Already started if null or unspecified.  # noqa: E501

        :param starts_at: The starts_at of this StoreIdPullpaymentsBody.  # noqa: E501
        :type: int
        """

        self._starts_at = starts_at

    @property
    def expires_at(self):
        """Gets the expires_at of this StoreIdPullpaymentsBody.  # noqa: E501

        When this pull payment expires. Never expires if null or unspecified.  # noqa: E501

        :return: The expires_at of this StoreIdPullpaymentsBody.  # noqa: E501
        :rtype: int
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this StoreIdPullpaymentsBody.

        When this pull payment expires. Never expires if null or unspecified.  # noqa: E501

        :param expires_at: The expires_at of this StoreIdPullpaymentsBody.  # noqa: E501
        :type: int
        """

        self._expires_at = expires_at

    @property
    def payment_methods(self):
        """Gets the payment_methods of this StoreIdPullpaymentsBody.  # noqa: E501

        The list of supported payment methods supported by this pull payment. Available options can be queried from the `StorePaymentMethods_GetStorePaymentMethods` endpoint  # noqa: E501

        :return: The payment_methods of this StoreIdPullpaymentsBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods):
        """Sets the payment_methods of this StoreIdPullpaymentsBody.

        The list of supported payment methods supported by this pull payment. Available options can be queried from the `StorePaymentMethods_GetStorePaymentMethods` endpoint  # noqa: E501

        :param payment_methods: The payment_methods of this StoreIdPullpaymentsBody.  # noqa: E501
        :type: list[str]
        """

        self._payment_methods = payment_methods

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StoreIdPullpaymentsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoreIdPullpaymentsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
