# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WebhookDataBaseAuthorizedEvents(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'everything': 'bool',
        'specific_events': 'list[str]'
    }

    attribute_map = {
        'everything': 'everything',
        'specific_events': 'specificEvents'
    }

    def __init__(self, everything=True, specific_events=None):  # noqa: E501
        """WebhookDataBaseAuthorizedEvents - a model defined in Swagger"""  # noqa: E501
        self._everything = None
        self._specific_events = None
        self.discriminator = None
        if everything is not None:
            self.everything = everything
        if specific_events is not None:
            self.specific_events = specific_events

    @property
    def everything(self):
        """Gets the everything of this WebhookDataBaseAuthorizedEvents.  # noqa: E501

        If true, the endpoint will receive all events related to the store.  # noqa: E501

        :return: The everything of this WebhookDataBaseAuthorizedEvents.  # noqa: E501
        :rtype: bool
        """
        return self._everything

    @everything.setter
    def everything(self, everything):
        """Sets the everything of this WebhookDataBaseAuthorizedEvents.

        If true, the endpoint will receive all events related to the store.  # noqa: E501

        :param everything: The everything of this WebhookDataBaseAuthorizedEvents.  # noqa: E501
        :type: bool
        """

        self._everything = everything

    @property
    def specific_events(self):
        """Gets the specific_events of this WebhookDataBaseAuthorizedEvents.  # noqa: E501

        If `everything` is false, the specific events that the endpoint is interested in. Current events are: `InvoiceCreated`, `InvoiceReceivedPayment`, `InvoiceProcessing`, `InvoiceExpired`, `InvoiceSettled`, `InvoiceInvalid`.  # noqa: E501

        :return: The specific_events of this WebhookDataBaseAuthorizedEvents.  # noqa: E501
        :rtype: list[str]
        """
        return self._specific_events

    @specific_events.setter
    def specific_events(self, specific_events):
        """Sets the specific_events of this WebhookDataBaseAuthorizedEvents.

        If `everything` is false, the specific events that the endpoint is interested in. Current events are: `InvoiceCreated`, `InvoiceReceivedPayment`, `InvoiceProcessing`, `InvoiceExpired`, `InvoiceSettled`, `InvoiceInvalid`.  # noqa: E501

        :param specific_events: The specific_events of this WebhookDataBaseAuthorizedEvents.  # noqa: E501
        :type: list[str]
        """

        self._specific_events = specific_events

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebhookDataBaseAuthorizedEvents, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookDataBaseAuthorizedEvents):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
